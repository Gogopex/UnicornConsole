{"message":"use of deprecated item 'try': use the `?` operator instead","code":{"code":"deprecated","explanation":null},"level":"warning","spans":[{"file_name":"/Users/ludwig/Dev/UnicornConsole/unicorn/src/unicorn/packet.rs","byte_start":693,"byte_end":696,"line_start":29,"line_end":29,"column_start":20,"column_end":23,"is_primary":true,"text":[{"text":"        Result::Ok(try!(buf.read_u8()))","highlight_start":20,"highlight_end":23}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(deprecated)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: use of deprecated item 'try': use the `?` operator instead\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/ludwig/Dev/UnicornConsole/unicorn/src/unicorn/packet.rs:29:20\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m29\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        Result::Ok(try!(buf.read_u8()))\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                   \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(deprecated)]` on by default\u001b[0m\n\n"}
{"message":"use of deprecated item 'try': use the `?` operator instead","code":{"code":"deprecated","explanation":null},"level":"warning","spans":[{"file_name":"/Users/ludwig/Dev/UnicornConsole/unicorn/src/unicorn/packet.rs","byte_start":801,"byte_end":804,"line_start":32,"line_end":32,"column_start":9,"column_end":12,"is_primary":true,"text":[{"text":"        try!(buf.write_u8(*self));","highlight_start":9,"highlight_end":12}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: use of deprecated item 'try': use the `?` operator instead\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/ludwig/Dev/UnicornConsole/unicorn/src/unicorn/packet.rs:32:9\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m32\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        try!(buf.write_u8(*self));\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\n\n"}
{"message":"use of deprecated item 'try': use the `?` operator instead","code":{"code":"deprecated","explanation":null},"level":"warning","spans":[{"file_name":"/Users/ludwig/Dev/UnicornConsole/unicorn/src/unicorn/packet.rs","byte_start":972,"byte_end":975,"line_start":39,"line_end":39,"column_start":20,"column_end":23,"is_primary":true,"text":[{"text":"        Result::Ok(try!(buf.read_i8()))","highlight_start":20,"highlight_end":23}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: use of deprecated item 'try': use the `?` operator instead\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/ludwig/Dev/UnicornConsole/unicorn/src/unicorn/packet.rs:39:20\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m39\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        Result::Ok(try!(buf.read_i8()))\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                   \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\n\n"}
{"message":"use of deprecated item 'try': use the `?` operator instead","code":{"code":"deprecated","explanation":null},"level":"warning","spans":[{"file_name":"/Users/ludwig/Dev/UnicornConsole/unicorn/src/unicorn/packet.rs","byte_start":1080,"byte_end":1083,"line_start":42,"line_end":42,"column_start":9,"column_end":12,"is_primary":true,"text":[{"text":"        try!(buf.write_i8(*self));","highlight_start":9,"highlight_end":12}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: use of deprecated item 'try': use the `?` operator instead\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/ludwig/Dev/UnicornConsole/unicorn/src/unicorn/packet.rs:42:9\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m42\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        try!(buf.write_i8(*self));\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\n\n"}
{"message":"use of deprecated item 'try': use the `?` operator instead","code":{"code":"deprecated","explanation":null},"level":"warning","spans":[{"file_name":"/Users/ludwig/Dev/UnicornConsole/unicorn/src/unicorn/packet.rs","byte_start":1253,"byte_end":1256,"line_start":49,"line_end":49,"column_start":20,"column_end":23,"is_primary":true,"text":[{"text":"        Result::Ok(try!(buf.read_i32::<BigEndian>()))","highlight_start":20,"highlight_end":23}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: use of deprecated item 'try': use the `?` operator instead\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/ludwig/Dev/UnicornConsole/unicorn/src/unicorn/packet.rs:49:20\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m49\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        Result::Ok(try!(buf.read_i32::<BigEndian>()))\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                   \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\n\n"}
{"message":"use of deprecated item 'try': use the `?` operator instead","code":{"code":"deprecated","explanation":null},"level":"warning","spans":[{"file_name":"/Users/ludwig/Dev/UnicornConsole/unicorn/src/unicorn/packet.rs","byte_start":1375,"byte_end":1378,"line_start":52,"line_end":52,"column_start":9,"column_end":12,"is_primary":true,"text":[{"text":"        try!(buf.write_i32::<BigEndian>(*self));","highlight_start":9,"highlight_end":12}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: use of deprecated item 'try': use the `?` operator instead\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/ludwig/Dev/UnicornConsole/unicorn/src/unicorn/packet.rs:52:9\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m52\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        try!(buf.write_i32::<BigEndian>(*self));\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\n\n"}
{"message":"use of deprecated item 'try': use the `?` operator instead","code":{"code":"deprecated","explanation":null},"level":"warning","spans":[{"file_name":"/Users/ludwig/Dev/UnicornConsole/unicorn/src/unicorn/packet.rs","byte_start":1562,"byte_end":1565,"line_start":59,"line_end":59,"column_start":20,"column_end":23,"is_primary":true,"text":[{"text":"        Result::Ok(try!(buf.read_u32::<BigEndian>()))","highlight_start":20,"highlight_end":23}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: use of deprecated item 'try': use the `?` operator instead\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/ludwig/Dev/UnicornConsole/unicorn/src/unicorn/packet.rs:59:20\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m59\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        Result::Ok(try!(buf.read_u32::<BigEndian>()))\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                   \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\n\n"}
{"message":"use of deprecated item 'try': use the `?` operator instead","code":{"code":"deprecated","explanation":null},"level":"warning","spans":[{"file_name":"/Users/ludwig/Dev/UnicornConsole/unicorn/src/unicorn/packet.rs","byte_start":1684,"byte_end":1687,"line_start":62,"line_end":62,"column_start":9,"column_end":12,"is_primary":true,"text":[{"text":"        try!(buf.write_u32::<BigEndian>(*self));","highlight_start":9,"highlight_end":12}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: use of deprecated item 'try': use the `?` operator instead\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/ludwig/Dev/UnicornConsole/unicorn/src/unicorn/packet.rs:62:9\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m62\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        try!(buf.write_u32::<BigEndian>(*self));\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\n\n"}
{"message":"use of deprecated item 'try': use the `?` operator instead","code":{"code":"deprecated","explanation":null},"level":"warning","spans":[{"file_name":"/Users/ludwig/Dev/UnicornConsole/unicorn/src/unicorn/packet.rs","byte_start":1871,"byte_end":1874,"line_start":69,"line_end":69,"column_start":20,"column_end":23,"is_primary":true,"text":[{"text":"        Result::Ok(try!(buf.read_u16::<BigEndian>()))","highlight_start":20,"highlight_end":23}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: use of deprecated item 'try': use the `?` operator instead\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/ludwig/Dev/UnicornConsole/unicorn/src/unicorn/packet.rs:69:20\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m69\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        Result::Ok(try!(buf.read_u16::<BigEndian>()))\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                   \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\n\n"}
{"message":"use of deprecated item 'try': use the `?` operator instead","code":{"code":"deprecated","explanation":null},"level":"warning","spans":[{"file_name":"/Users/ludwig/Dev/UnicornConsole/unicorn/src/unicorn/packet.rs","byte_start":1993,"byte_end":1996,"line_start":72,"line_end":72,"column_start":9,"column_end":12,"is_primary":true,"text":[{"text":"        try!(buf.write_u16::<BigEndian>(*self));","highlight_start":9,"highlight_end":12}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: use of deprecated item 'try': use the `?` operator instead\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/ludwig/Dev/UnicornConsole/unicorn/src/unicorn/packet.rs:72:9\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m72\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        try!(buf.write_u16::<BigEndian>(*self));\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\n\n"}
{"message":"use of deprecated item 'try': use the `?` operator instead","code":{"code":"deprecated","explanation":null},"level":"warning","spans":[{"file_name":"/Users/ludwig/Dev/UnicornConsole/unicorn/src/unicorn/packet.rs","byte_start":2209,"byte_end":2212,"line_start":80,"line_end":80,"column_start":9,"column_end":12,"is_primary":true,"text":[{"text":"        try!(buf.read_to_end(&mut v));","highlight_start":9,"highlight_end":12}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: use of deprecated item 'try': use the `?` operator instead\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/ludwig/Dev/UnicornConsole/unicorn/src/unicorn/packet.rs:80:9\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m80\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        try!(buf.read_to_end(&mut v));\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\n\n"}
{"message":"use of deprecated item 'try': use the `?` operator instead","code":{"code":"deprecated","explanation":null},"level":"warning","spans":[{"file_name":"/Users/ludwig/Dev/UnicornConsole/unicorn/src/unicorn/packet.rs","byte_start":2514,"byte_end":2517,"line_start":91,"line_end":91,"column_start":20,"column_end":23,"is_primary":true,"text":[{"text":"        Result::Ok(try!(buf.read_u8()) != 0)","highlight_start":20,"highlight_end":23}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: use of deprecated item 'try': use the `?` operator instead\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/ludwig/Dev/UnicornConsole/unicorn/src/unicorn/packet.rs:91:20\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m91\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        Result::Ok(try!(buf.read_u8()) != 0)\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                   \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\n\n"}
{"message":"use of deprecated item 'try': use the `?` operator instead","code":{"code":"deprecated","explanation":null},"level":"warning","spans":[{"file_name":"/Users/ludwig/Dev/UnicornConsole/unicorn/src/unicorn/packet.rs","byte_start":2627,"byte_end":2630,"line_start":94,"line_end":94,"column_start":9,"column_end":12,"is_primary":true,"text":[{"text":"        try!(buf.write_u8(if *self { 1 } else { 0 }));","highlight_start":9,"highlight_end":12}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: use of deprecated item 'try': use the `?` operator instead\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/ludwig/Dev/UnicornConsole/unicorn/src/unicorn/packet.rs:94:9\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m94\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        try!(buf.write_u8(if *self { 1 } else { 0 }));\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\n\n"}
{"message":"use of deprecated item 'try': use the `?` operator instead","code":{"code":"deprecated","explanation":null},"level":"warning","spans":[{"file_name":"/Users/ludwig/Dev/UnicornConsole/unicorn/src/unicorn/packet.rs","byte_start":3036,"byte_end":3039,"line_start":105,"line_end":105,"column_start":9,"column_end":12,"is_primary":true,"text":[{"text":"        try!(buf.take(len as u64).read_to_string(&mut ret));","highlight_start":9,"highlight_end":12}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: use of deprecated item 'try': use the `?` operator instead\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/ludwig/Dev/UnicornConsole/unicorn/src/unicorn/packet.rs:105:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m105\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        try!(buf.take(len as u64).read_to_string(&mut ret));\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\n\n"}
{"message":"use of deprecated item 'try': use the `?` operator instead","code":{"code":"deprecated","explanation":null},"level":"warning","spans":[{"file_name":"/Users/ludwig/Dev/UnicornConsole/unicorn/src/unicorn/packet.rs","byte_start":3237,"byte_end":3240,"line_start":110,"line_end":110,"column_start":9,"column_end":12,"is_primary":true,"text":[{"text":"        try!(VarInt(bytes.len() as i32).write_to(buf));","highlight_start":9,"highlight_end":12}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: use of deprecated item 'try': use the `?` operator instead\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/ludwig/Dev/UnicornConsole/unicorn/src/unicorn/packet.rs:110:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m110\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        try!(VarInt(bytes.len() as i32).write_to(buf));\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\n\n"}
{"message":"use of deprecated item 'try': use the `?` operator instead","code":{"code":"deprecated","explanation":null},"level":"warning","spans":[{"file_name":"/Users/ludwig/Dev/UnicornConsole/unicorn/src/unicorn/packet.rs","byte_start":3293,"byte_end":3296,"line_start":111,"line_end":111,"column_start":9,"column_end":12,"is_primary":true,"text":[{"text":"        try!(buf.write_all(bytes));","highlight_start":9,"highlight_end":12}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: use of deprecated item 'try': use the `?` operator instead\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/ludwig/Dev/UnicornConsole/unicorn/src/unicorn/packet.rs:111:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m111\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        try!(buf.write_all(bytes));\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\n\n"}
{"message":"use of deprecated item 'try': use the `?` operator instead","code":{"code":"deprecated","explanation":null},"level":"warning","spans":[{"file_name":"/Users/ludwig/Dev/UnicornConsole/unicorn/src/unicorn/packet.rs","byte_start":5110,"byte_end":5113,"line_start":178,"line_end":178,"column_start":29,"column_end":32,"is_primary":true,"text":[{"text":"                            try!(self.$field.write_to(buf));","highlight_start":29,"highlight_end":32}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/ludwig/Dev/UnicornConsole/unicorn/src/unicorn/packet.rs","byte_start":5956,"byte_end":6709,"line_start":208,"line_end":238,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"create_packets!(","highlight_start":1,"highlight_end":17},{"text":"    packet ChiptuneMusic {","highlight_start":1,"highlight_end":27},{"text":"        field channel: i32 =,","highlight_start":1,"highlight_end":30},{"text":"        field id: i32 =,","highlight_start":1,"highlight_end":25},{"text":"        field filename: String =,","highlight_start":1,"highlight_end":34},{"text":"        field loops: i32 =,","highlight_start":1,"highlight_end":28},{"text":"        field start_position: i32 =,","highlight_start":1,"highlight_end":37},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"    packet ChiptuneSFX {","highlight_start":1,"highlight_end":25},{"text":"        field channel: i32 =,","highlight_start":1,"highlight_end":30},{"text":"        field id: i32 =,","highlight_start":1,"highlight_end":25},{"text":"        field filename: String =,","highlight_start":1,"highlight_end":34},{"text":"        field loops: i32 =,","highlight_start":1,"highlight_end":28},{"text":"        field note: u16 =,","highlight_start":1,"highlight_end":27},{"text":"        field panning: i32 =,","highlight_start":1,"highlight_end":30},{"text":"        field rate: i32 =,","highlight_start":1,"highlight_end":27},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"    packet ChiptuneLoadSFX {","highlight_start":1,"highlight_end":29},{"text":"        field filename: String =,","highlight_start":1,"highlight_end":34},{"text":"        field data: Vec<u8> =,","highlight_start":1,"highlight_end":31},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"    packet ChiptuneMusicState {","highlight_start":1,"highlight_end":32},{"text":"        field stop: bool =,","highlight_start":1,"highlight_end":28},{"text":"        field chan: i32 =,","highlight_start":1,"highlight_end":27},{"text":"        field pause: bool =,","highlight_start":1,"highlight_end":29},{"text":"        field resume: bool =,","highlight_start":1,"highlight_end":30},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"    packet ChiptuneVolume {","highlight_start":1,"highlight_end":28},{"text":"        field volume: i32 =,","highlight_start":1,"highlight_end":29},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"create_packets!","def_site_span":{"file_name":"/Users/ludwig/Dev/UnicornConsole/unicorn/src/unicorn/packet.rs","byte_start":4183,"byte_end":5954,"line_start":145,"line_end":206,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! create_packets {","highlight_start":1,"highlight_end":30},{"text":"        ($(","highlight_start":1,"highlight_end":12},{"text":"            $(#[$attr:meta])*","highlight_start":1,"highlight_end":30},{"text":"            packet $name:ident {","highlight_start":1,"highlight_end":33},{"text":"                $($(#[$fattr:meta])*field $field:ident: $field_type:ty = $(when ($cond:expr))*, )+","highlight_start":1,"highlight_end":99},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        )*)","highlight_start":1,"highlight_end":12},{"text":"        => {","highlight_start":1,"highlight_end":13},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        #[derive(Debug)]","highlight_start":1,"highlight_end":25},{"text":"        pub enum Packet {","highlight_start":1,"highlight_end":26},{"text":"                $(","highlight_start":1,"highlight_end":19},{"text":"                    $name($name),","highlight_start":1,"highlight_end":34},{"text":"                )*","highlight_start":1,"highlight_end":19},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        pub mod internal_ids {","highlight_start":1,"highlight_end":31},{"text":"            create_ids!(i32, $($name),*);","highlight_start":1,"highlight_end":42},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        $(","highlight_start":1,"highlight_end":11},{"text":"            #[derive(Default, Debug)]","highlight_start":1,"highlight_end":38},{"text":"            $(#[$attr])* pub struct $name {","highlight_start":1,"highlight_end":44},{"text":"                $($(#[$fattr])* pub $field: $field_type),+,","highlight_start":1,"highlight_end":60},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            impl PacketType for $name {","highlight_start":1,"highlight_end":40},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                fn packet_id(&self) -> i32 { internal_ids::$name }","highlight_start":1,"highlight_end":67},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                fn write<W: io::Write>(self, buf: &mut W) -> Result<(), Error> {","highlight_start":1,"highlight_end":81},{"text":"                    $(","highlight_start":1,"highlight_end":23},{"text":"                        if true $(&& ($cond(&self)))* {","highlight_start":1,"highlight_end":56},{"text":"                            try!(self.$field.write_to(buf));","highlight_start":1,"highlight_end":61},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    )+","highlight_start":1,"highlight_end":23},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                    Result::Ok(())","highlight_start":1,"highlight_end":35},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        )*","highlight_start":1,"highlight_end":11},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        pub fn packet_by_id<R: io::Read>(id: i32, mut buf: &mut R) -> Result<Option<Packet>, Error> {","highlight_start":1,"highlight_end":102},{"text":"            match id {","highlight_start":1,"highlight_end":23},{"text":"            $(","highlight_start":1,"highlight_end":15},{"text":"                self::internal_ids::$name => {","highlight_start":1,"highlight_end":47},{"text":"                    use self::$name;","highlight_start":1,"highlight_end":37},{"text":"                    let mut packet : $name = $name::default();","highlight_start":1,"highlight_end":63},{"text":"                    $(","highlight_start":1,"highlight_end":23},{"text":"                        if true $(&& ($cond(&packet)))* {","highlight_start":1,"highlight_end":58},{"text":"                            packet.$field = try!(Serializable::read_from(&mut buf));","highlight_start":1,"highlight_end":85},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    )+","highlight_start":1,"highlight_end":23},{"text":"                    Result::Ok(Option::Some(Packet::$name(packet)))","highlight_start":1,"highlight_end":68},{"text":"                },","highlight_start":1,"highlight_end":19},{"text":"            )*","highlight_start":1,"highlight_end":15},{"text":"                _ => Result::Ok(Option::None)","highlight_start":1,"highlight_end":46},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: use of deprecated item 'try': use the `?` operator instead\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/ludwig/Dev/UnicornConsole/unicorn/src/unicorn/packet.rs:178:29\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m178\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0m                            try!(self.$field.write_to(buf));\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                              \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m208\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mcreate_packets!(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m209\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    packet ChiptuneMusic {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m210\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        field channel: i32 =,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m211\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        field id: i32 =,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m237\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m238\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|__-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"use of deprecated item 'try': use the `?` operator instead","code":{"code":"deprecated","explanation":null},"level":"warning","spans":[{"file_name":"/Users/ludwig/Dev/UnicornConsole/unicorn/src/unicorn/packet.rs","byte_start":5684,"byte_end":5687,"line_start":195,"line_end":195,"column_start":45,"column_end":48,"is_primary":true,"text":[{"text":"                            packet.$field = try!(Serializable::read_from(&mut buf));","highlight_start":45,"highlight_end":48}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/ludwig/Dev/UnicornConsole/unicorn/src/unicorn/packet.rs","byte_start":5956,"byte_end":6709,"line_start":208,"line_end":238,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"create_packets!(","highlight_start":1,"highlight_end":17},{"text":"    packet ChiptuneMusic {","highlight_start":1,"highlight_end":27},{"text":"        field channel: i32 =,","highlight_start":1,"highlight_end":30},{"text":"        field id: i32 =,","highlight_start":1,"highlight_end":25},{"text":"        field filename: String =,","highlight_start":1,"highlight_end":34},{"text":"        field loops: i32 =,","highlight_start":1,"highlight_end":28},{"text":"        field start_position: i32 =,","highlight_start":1,"highlight_end":37},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"    packet ChiptuneSFX {","highlight_start":1,"highlight_end":25},{"text":"        field channel: i32 =,","highlight_start":1,"highlight_end":30},{"text":"        field id: i32 =,","highlight_start":1,"highlight_end":25},{"text":"        field filename: String =,","highlight_start":1,"highlight_end":34},{"text":"        field loops: i32 =,","highlight_start":1,"highlight_end":28},{"text":"        field note: u16 =,","highlight_start":1,"highlight_end":27},{"text":"        field panning: i32 =,","highlight_start":1,"highlight_end":30},{"text":"        field rate: i32 =,","highlight_start":1,"highlight_end":27},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"    packet ChiptuneLoadSFX {","highlight_start":1,"highlight_end":29},{"text":"        field filename: String =,","highlight_start":1,"highlight_end":34},{"text":"        field data: Vec<u8> =,","highlight_start":1,"highlight_end":31},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"    packet ChiptuneMusicState {","highlight_start":1,"highlight_end":32},{"text":"        field stop: bool =,","highlight_start":1,"highlight_end":28},{"text":"        field chan: i32 =,","highlight_start":1,"highlight_end":27},{"text":"        field pause: bool =,","highlight_start":1,"highlight_end":29},{"text":"        field resume: bool =,","highlight_start":1,"highlight_end":30},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"    packet ChiptuneVolume {","highlight_start":1,"highlight_end":28},{"text":"        field volume: i32 =,","highlight_start":1,"highlight_end":29},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"create_packets!","def_site_span":{"file_name":"/Users/ludwig/Dev/UnicornConsole/unicorn/src/unicorn/packet.rs","byte_start":4183,"byte_end":5954,"line_start":145,"line_end":206,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! create_packets {","highlight_start":1,"highlight_end":30},{"text":"        ($(","highlight_start":1,"highlight_end":12},{"text":"            $(#[$attr:meta])*","highlight_start":1,"highlight_end":30},{"text":"            packet $name:ident {","highlight_start":1,"highlight_end":33},{"text":"                $($(#[$fattr:meta])*field $field:ident: $field_type:ty = $(when ($cond:expr))*, )+","highlight_start":1,"highlight_end":99},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        )*)","highlight_start":1,"highlight_end":12},{"text":"        => {","highlight_start":1,"highlight_end":13},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        #[derive(Debug)]","highlight_start":1,"highlight_end":25},{"text":"        pub enum Packet {","highlight_start":1,"highlight_end":26},{"text":"                $(","highlight_start":1,"highlight_end":19},{"text":"                    $name($name),","highlight_start":1,"highlight_end":34},{"text":"                )*","highlight_start":1,"highlight_end":19},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        pub mod internal_ids {","highlight_start":1,"highlight_end":31},{"text":"            create_ids!(i32, $($name),*);","highlight_start":1,"highlight_end":42},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        $(","highlight_start":1,"highlight_end":11},{"text":"            #[derive(Default, Debug)]","highlight_start":1,"highlight_end":38},{"text":"            $(#[$attr])* pub struct $name {","highlight_start":1,"highlight_end":44},{"text":"                $($(#[$fattr])* pub $field: $field_type),+,","highlight_start":1,"highlight_end":60},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            impl PacketType for $name {","highlight_start":1,"highlight_end":40},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                fn packet_id(&self) -> i32 { internal_ids::$name }","highlight_start":1,"highlight_end":67},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                fn write<W: io::Write>(self, buf: &mut W) -> Result<(), Error> {","highlight_start":1,"highlight_end":81},{"text":"                    $(","highlight_start":1,"highlight_end":23},{"text":"                        if true $(&& ($cond(&self)))* {","highlight_start":1,"highlight_end":56},{"text":"                            try!(self.$field.write_to(buf));","highlight_start":1,"highlight_end":61},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    )+","highlight_start":1,"highlight_end":23},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                    Result::Ok(())","highlight_start":1,"highlight_end":35},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        )*","highlight_start":1,"highlight_end":11},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        pub fn packet_by_id<R: io::Read>(id: i32, mut buf: &mut R) -> Result<Option<Packet>, Error> {","highlight_start":1,"highlight_end":102},{"text":"            match id {","highlight_start":1,"highlight_end":23},{"text":"            $(","highlight_start":1,"highlight_end":15},{"text":"                self::internal_ids::$name => {","highlight_start":1,"highlight_end":47},{"text":"                    use self::$name;","highlight_start":1,"highlight_end":37},{"text":"                    let mut packet : $name = $name::default();","highlight_start":1,"highlight_end":63},{"text":"                    $(","highlight_start":1,"highlight_end":23},{"text":"                        if true $(&& ($cond(&packet)))* {","highlight_start":1,"highlight_end":58},{"text":"                            packet.$field = try!(Serializable::read_from(&mut buf));","highlight_start":1,"highlight_end":85},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    )+","highlight_start":1,"highlight_end":23},{"text":"                    Result::Ok(Option::Some(Packet::$name(packet)))","highlight_start":1,"highlight_end":68},{"text":"                },","highlight_start":1,"highlight_end":19},{"text":"            )*","highlight_start":1,"highlight_end":15},{"text":"                _ => Result::Ok(Option::None)","highlight_start":1,"highlight_end":46},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: use of deprecated item 'try': use the `?` operator instead\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/ludwig/Dev/UnicornConsole/unicorn/src/unicorn/packet.rs:195:45\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m195\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0m                            packet.$field = try!(Serializable::read_from(&mut buf));\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                              \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m208\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mcreate_packets!(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m209\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    packet ChiptuneMusic {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m210\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        field channel: i32 =,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m211\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        field id: i32 =,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m237\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m238\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|__-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"use of deprecated item 'try': use the `?` operator instead","code":{"code":"deprecated","explanation":null},"level":"warning","spans":[{"file_name":"/Users/ludwig/Dev/UnicornConsole/unicorn/src/unicorn/packet.rs","byte_start":7299,"byte_end":7302,"line_start":266,"line_end":266,"column_start":21,"column_end":24,"is_primary":true,"text":[{"text":"            let b = try!(buf.read_u8()) as u32;","highlight_start":21,"highlight_end":24}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: use of deprecated item 'try': use the `?` operator instead\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/ludwig/Dev/UnicornConsole/unicorn/src/unicorn/packet.rs:266:21\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m266\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            let b = try!(buf.read_u8()) as u32;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\n\n"}
{"message":"use of deprecated item 'try': use the `?` operator instead","code":{"code":"deprecated","explanation":null},"level":"warning","spans":[{"file_name":"/Users/ludwig/Dev/UnicornConsole/unicorn/src/unicorn/packet.rs","byte_start":7898,"byte_end":7901,"line_start":286,"line_end":286,"column_start":17,"column_end":20,"is_primary":true,"text":[{"text":"                try!(buf.write_u8(val as u8));","highlight_start":17,"highlight_end":20}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: use of deprecated item 'try': use the `?` operator instead\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/ludwig/Dev/UnicornConsole/unicorn/src/unicorn/packet.rs:286:17\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m286\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                try!(buf.write_u8(val as u8));\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\n\n"}
{"message":"use of deprecated item 'try': use the `?` operator instead","code":{"code":"deprecated","explanation":null},"level":"warning","spans":[{"file_name":"/Users/ludwig/Dev/UnicornConsole/unicorn/src/unicorn/packet.rs","byte_start":7994,"byte_end":7997,"line_start":289,"line_end":289,"column_start":13,"column_end":16,"is_primary":true,"text":[{"text":"            try!(buf.write_u8(((val & PART) | 0x80) as u8));","highlight_start":13,"highlight_end":16}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: use of deprecated item 'try': use the `?` operator instead\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/ludwig/Dev/UnicornConsole/unicorn/src/unicorn/packet.rs:289:13\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m289\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            try!(buf.write_u8(((val & PART) | 0x80) as u8));\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\n\n"}
{"message":"use of deprecated item 'try': use the `?` operator instead","code":{"code":"deprecated","explanation":null},"level":"warning","spans":[{"file_name":"/Users/ludwig/Dev/UnicornConsole/unicorn/src/unicorn/packet.rs","byte_start":8461,"byte_end":8464,"line_start":313,"line_end":313,"column_start":5,"column_end":8,"is_primary":true,"text":[{"text":"    try!(VarInt(packet.packet_id()).write_to(&mut buf));","highlight_start":5,"highlight_end":8}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: use of deprecated item 'try': use the `?` operator instead\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/ludwig/Dev/UnicornConsole/unicorn/src/unicorn/packet.rs:313:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m313\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    try!(VarInt(packet.packet_id()).write_to(&mut buf));\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\n\n"}
{"message":"use of deprecated item 'try': use the `?` operator instead","code":{"code":"deprecated","explanation":null},"level":"warning","spans":[{"file_name":"/Users/ludwig/Dev/UnicornConsole/unicorn/src/unicorn/packet.rs","byte_start":8518,"byte_end":8521,"line_start":314,"line_end":314,"column_start":5,"column_end":8,"is_primary":true,"text":[{"text":"    try!(packet.write(&mut buf));","highlight_start":5,"highlight_end":8}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: use of deprecated item 'try': use the `?` operator instead\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/ludwig/Dev/UnicornConsole/unicorn/src/unicorn/packet.rs:314:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m314\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    try!(packet.write(&mut buf));\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\n\n"}
{"message":"use of deprecated item 'try': use the `?` operator instead","code":{"code":"deprecated","explanation":null},"level":"warning","spans":[{"file_name":"/Users/ludwig/Dev/UnicornConsole/unicorn/src/unicorn/packet.rs","byte_start":8856,"byte_end":8859,"line_start":328,"line_end":328,"column_start":14,"column_end":17,"is_primary":true,"text":[{"text":"    let id = try!(VarInt::read_from(&mut buf_cur)).0;","highlight_start":14,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: use of deprecated item 'try': use the `?` operator instead\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/ludwig/Dev/UnicornConsole/unicorn/src/unicorn/packet.rs:328:14\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m328\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    let id = try!(VarInt::read_from(&mut buf_cur)).0;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\n\n"}
{"message":"use of deprecated item 'try': use the `?` operator instead","code":{"code":"deprecated","explanation":null},"level":"warning","spans":[{"file_name":"/Users/ludwig/Dev/UnicornConsole/unicorn/src/unicorn/packet.rs","byte_start":8914,"byte_end":8917,"line_start":329,"line_end":329,"column_start":18,"column_end":21,"is_primary":true,"text":[{"text":"    let packet = try!(packet_by_id(id, &mut buf_cur));","highlight_start":18,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: use of deprecated item 'try': use the `?` operator instead\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/ludwig/Dev/UnicornConsole/unicorn/src/unicorn/packet.rs:329:18\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m329\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    let packet = try!(packet_by_id(id, &mut buf_cur));\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                 \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\n\n"}
{"message":"use of deprecated item 'try': use the `?` operator instead","code":{"code":"deprecated","explanation":null},"level":"warning","spans":[{"file_name":"/Users/ludwig/Dev/UnicornConsole/unicorn/src/cartridge/mod.rs","byte_start":12370,"byte_end":12373,"line_start":561,"line_end":561,"column_start":5,"column_end":8,"is_primary":true,"text":[{"text":"    try!(buf.read_line(&mut header));","highlight_start":5,"highlight_end":8}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: use of deprecated item 'try': use the `?` operator instead\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/ludwig/Dev/UnicornConsole/unicorn/src/cartridge/mod.rs:561:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m561\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    try!(buf.read_line(&mut header));\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\n\n"}
{"message":"use of deprecated item 'try': use the `?` operator instead","code":{"code":"deprecated","explanation":null},"level":"warning","spans":[{"file_name":"/Users/ludwig/Dev/UnicornConsole/unicorn/src/cartridge/mod.rs","byte_start":12446,"byte_end":12449,"line_start":564,"line_end":564,"column_start":5,"column_end":8,"is_primary":true,"text":[{"text":"    try!(buf.read_line(&mut version));","highlight_start":5,"highlight_end":8}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: use of deprecated item 'try': use the `?` operator instead\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/ludwig/Dev/UnicornConsole/unicorn/src/cartridge/mod.rs:564:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m564\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    try!(buf.read_line(&mut version));\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\n\n"}
{"message":"use of deprecated item 'try': use the `?` operator instead","code":{"code":"deprecated","explanation":null},"level":"warning","spans":[{"file_name":"/Users/ludwig/Dev/UnicornConsole/unicorn/src/cartridge/mod.rs","byte_start":19228,"byte_end":19231,"line_start":777,"line_end":777,"column_start":25,"column_end":28,"is_primary":true,"text":[{"text":"        let cartridge = try!(read_from_uniformat(filename, &mut buf_reader));","highlight_start":25,"highlight_end":28}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: use of deprecated item 'try': use the `?` operator instead\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/ludwig/Dev/UnicornConsole/unicorn/src/cartridge/mod.rs:777:25\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m777\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        let cartridge = try!(read_from_uniformat(filename, &mut buf_reader));\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\n\n"}
{"message":"use of deprecated item 'try': use the `?` operator instead","code":{"code":"deprecated","explanation":null},"level":"warning","spans":[{"file_name":"/Users/ludwig/Dev/UnicornConsole/unicorn/src/cartridge/mod.rs","byte_start":19402,"byte_end":19405,"line_start":782,"line_end":782,"column_start":17,"column_end":20,"is_primary":true,"text":[{"text":"        let f = try!(File::open(filename));","highlight_start":17,"highlight_end":20}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: use of deprecated item 'try': use the `?` operator instead\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/ludwig/Dev/UnicornConsole/unicorn/src/cartridge/mod.rs:782:17\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m782\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        let f = try!(File::open(filename));\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\n\n"}
{"message":"use of deprecated item 'try': use the `?` operator instead","code":{"code":"deprecated","explanation":null},"level":"warning","spans":[{"file_name":"/Users/ludwig/Dev/UnicornConsole/unicorn/src/cartridge/mod.rs","byte_start":19502,"byte_end":19505,"line_start":784,"line_end":784,"column_start":25,"column_end":28,"is_primary":true,"text":[{"text":"        let cartridge = try!(read_from_uniformat(filename, &mut buf_reader));","highlight_start":25,"highlight_end":28}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: use of deprecated item 'try': use the `?` operator instead\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/ludwig/Dev/UnicornConsole/unicorn/src/cartridge/mod.rs:784:25\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m784\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        let cartridge = try!(read_from_uniformat(filename, &mut buf_reader));\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\n\n"}
{"message":"use of deprecated item 'try': use the `?` operator instead","code":{"code":"deprecated","explanation":null},"level":"warning","spans":[{"file_name":"/Users/ludwig/Dev/UnicornConsole/unicorn/src/cartridge/mod.rs","byte_start":19689,"byte_end":19692,"line_start":789,"line_end":789,"column_start":21,"column_end":24,"is_primary":true,"text":[{"text":"        let mut f = try!(File::open(filename));","highlight_start":21,"highlight_end":24}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: use of deprecated item 'try': use the `?` operator instead\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/ludwig/Dev/UnicornConsole/unicorn/src/cartridge/mod.rs:789:21\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m789\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        let mut f = try!(File::open(filename));\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\n\n"}
{"message":"use of deprecated item 'try': use the `?` operator instead","code":{"code":"deprecated","explanation":null},"level":"warning","spans":[{"file_name":"/Users/ludwig/Dev/UnicornConsole/unicorn/src/cartridge/mod.rs","byte_start":19946,"byte_end":19949,"line_start":798,"line_end":798,"column_start":18,"column_end":21,"is_primary":true,"text":[{"text":"        let f1 = try!(File::open(code_file));","highlight_start":18,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: use of deprecated item 'try': use the `?` operator instead\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/ludwig/Dev/UnicornConsole/unicorn/src/cartridge/mod.rs:798:18\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m798\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        let f1 = try!(File::open(code_file));\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                 \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\n\n"}
{"message":"use of deprecated item 'try': use the `?` operator instead","code":{"code":"deprecated","explanation":null},"level":"warning","spans":[{"file_name":"/Users/ludwig/Dev/UnicornConsole/unicorn/src/cartridge/mod.rs","byte_start":20247,"byte_end":20250,"line_start":809,"line_end":809,"column_start":18,"column_end":21,"is_primary":true,"text":[{"text":"        let f2 = try!(File::open(data_file));","highlight_start":18,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: use of deprecated item 'try': use the `?` operator instead\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/ludwig/Dev/UnicornConsole/unicorn/src/cartridge/mod.rs:809:18\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m809\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        let f2 = try!(File::open(data_file));\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                 \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\n\n"}
{"message":"use of deprecated item 'try': use the `?` operator instead","code":{"code":"deprecated","explanation":null},"level":"warning","spans":[{"file_name":"/Users/ludwig/Dev/UnicornConsole/unicorn/src/cartridge/mod.rs","byte_start":23696,"byte_end":23699,"line_start":906,"line_end":906,"column_start":21,"column_end":24,"is_primary":true,"text":[{"text":"        let mut f = try!(File::open(filename));","highlight_start":21,"highlight_end":24}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: use of deprecated item 'try': use the `?` operator instead\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/ludwig/Dev/UnicornConsole/unicorn/src/cartridge/mod.rs:906:21\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m906\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        let mut f = try!(File::open(filename));\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\n\n"}
{"message":"trait objects without an explicit `dyn` are deprecated","code":{"code":"bare_trait_objects","explanation":null},"level":"warning","spans":[{"file_name":"/Users/ludwig/Dev/UnicornConsole/unicorn/src/editor/text_editor/mod.rs","byte_start":2455,"byte_end":2459,"line_start":104,"line_end":104,"column_start":15,"column_end":19,"is_primary":true,"text":[{"text":"    mode: Box<Mode>,","highlight_start":15,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(bare_trait_objects)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"use `dyn`","code":null,"level":"help","spans":[{"file_name":"/Users/ludwig/Dev/UnicornConsole/unicorn/src/editor/text_editor/mod.rs","byte_start":2455,"byte_end":2459,"line_start":104,"line_end":104,"column_start":15,"column_end":19,"is_primary":true,"text":[{"text":"    mode: Box<Mode>,","highlight_start":15,"highlight_end":19}],"label":null,"suggested_replacement":"dyn Mode","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: trait objects without an explicit `dyn` are deprecated\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/ludwig/Dev/UnicornConsole/unicorn/src/editor/text_editor/mod.rs:104:15\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m104\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    mode: Box<Mode>,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m              \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: use `dyn`: `dyn Mode`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(bare_trait_objects)]` on by default\u001b[0m\n\n"}
{"message":"use of deprecated item 'std::sync::ONCE_INIT': the `new` function is now preferred","code":{"code":"deprecated","explanation":null},"level":"warning","spans":[{"file_name":"/Users/ludwig/.cargo/registry/src/github.com-1ecc6299db9ec823/lazy_static-0.1.16/src/lib.rs","byte_start":2755,"byte_end":2764,"line_start":91,"line_end":91,"column_start":43,"column_end":52,"is_primary":true,"text":[{"text":"                    use std::sync::{Once, ONCE_INIT};","highlight_start":43,"highlight_end":52}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/ludwig/.cargo/registry/src/github.com-1ecc6299db9ec823/lazy_static-0.1.16/src/lib.rs","byte_start":2261,"byte_end":2325,"line_start":80,"line_end":80,"column_start":9,"column_end":73,"is_primary":false,"text":[{"text":"        lazy_static!(PUB, $(#[$attr])* static ref $N : $T = $e; $($t)*);","highlight_start":9,"highlight_end":73}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/ludwig/Dev/UnicornConsole/unicorn/src/unicorn/mod.rs","byte_start":2827,"byte_end":2932,"line_start":123,"line_end":127,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"lazy_static! {","highlight_start":1,"highlight_end":15},{"text":"    pub static ref PALETTE: Mutex<Palette> = {","highlight_start":1,"highlight_end":47},{"text":"        Mutex::new(Palette::new())","highlight_start":1,"highlight_end":35},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"lazy_static!","def_site_span":{"file_name":"/Users/ludwig/.cargo/registry/src/github.com-1ecc6299db9ec823/lazy_static-0.1.16/src/lib.rs","byte_start":1985,"byte_end":5163,"line_start":75,"line_end":157,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! lazy_static {","highlight_start":1,"highlight_end":1},{"text":"    ($(#[$attr:meta])* static ref $N:ident : $T:ty = $e:expr; $($t:tt)*) => {","highlight_start":1,"highlight_end":1},{"text":"        lazy_static!(PRIV, $(#[$attr])* static ref $N : $T = $e; $($t)*);","highlight_start":1,"highlight_end":1},{"text":"    };","highlight_start":1,"highlight_end":1},{"text":"    ($(#[$attr:meta])* pub static ref $N:ident : $T:ty = $e:expr; $($t:tt)*) => {","highlight_start":1,"highlight_end":1},{"text":"        lazy_static!(PUB, $(#[$attr])* static ref $N : $T = $e; $($t)*);","highlight_start":1,"highlight_end":1},{"text":"    };","highlight_start":1,"highlight_end":1},{"text":"    ($VIS:ident, $(#[$attr:meta])* static ref $N:ident : $T:ty = $e:expr; $($t:tt)*) => {","highlight_start":1,"highlight_end":1},{"text":"        lazy_static!(MAKE TY, $VIS, $(#[$attr])*, $N);","highlight_start":1,"highlight_end":1},{"text":"        impl ::std::ops::Deref for $N {","highlight_start":1,"highlight_end":1},{"text":"            type Target = $T;","highlight_start":1,"highlight_end":1},{"text":"            fn deref<'a>(&'a self) -> &'a $T {","highlight_start":1,"highlight_end":1},{"text":"                #[inline(always)]","highlight_start":1,"highlight_end":1},{"text":"                fn __static_ref_initialize() -> $T { $e }","highlight_start":1,"highlight_end":1},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                unsafe {","highlight_start":1,"highlight_end":1},{"text":"                    use std::sync::{Once, ONCE_INIT};","highlight_start":1,"highlight_end":1},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                    #[inline(always)]","highlight_start":1,"highlight_end":1},{"text":"                    fn require_sync<T: Sync>(_: &T) { }","highlight_start":1,"highlight_end":1},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                    #[inline(always)]","highlight_start":1,"highlight_end":1},{"text":"                    #[cfg(feature=\"nightly\")]","highlight_start":1,"highlight_end":1},{"text":"                    unsafe fn __stability() -> &'static $T {","highlight_start":1,"highlight_end":1},{"text":"                        use std::cell::UnsafeCell;","highlight_start":1,"highlight_end":1},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                        struct SyncCell(UnsafeCell<Option<$T>>);","highlight_start":1,"highlight_end":1},{"text":"                        unsafe impl Sync for SyncCell {}","highlight_start":1,"highlight_end":1},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                        static DATA: SyncCell = SyncCell(UnsafeCell::new(None));","highlight_start":1,"highlight_end":1},{"text":"                        static ONCE: Once = ONCE_INIT;","highlight_start":1,"highlight_end":1},{"text":"                        ONCE.call_once(|| {","highlight_start":1,"highlight_end":1},{"text":"                            *DATA.0.get() = Some(__static_ref_initialize());","highlight_start":1,"highlight_end":1},{"text":"                        });","highlight_start":1,"highlight_end":1},{"text":"                        match *DATA.0.get() {","highlight_start":1,"highlight_end":1},{"text":"                            Some(ref x) => x,","highlight_start":1,"highlight_end":1},{"text":"                            None => ::std::intrinsics::unreachable(),","highlight_start":1,"highlight_end":1},{"text":"                        }","highlight_start":1,"highlight_end":1},{"text":"                    }","highlight_start":1,"highlight_end":1},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                    #[inline(always)]","highlight_start":1,"highlight_end":1},{"text":"                    #[cfg(not(feature=\"nightly\"))]","highlight_start":1,"highlight_end":1},{"text":"                    unsafe fn __stability() -> &'static $T {","highlight_start":1,"highlight_end":1},{"text":"                        use std::mem::transmute;","highlight_start":1,"highlight_end":1},{"text":"                        use std::boxed::Box;","highlight_start":1,"highlight_end":1},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                        static mut DATA: *const $T = 0 as *const $T;","highlight_start":1,"highlight_end":1},{"text":"                        static mut ONCE: Once = ONCE_INIT;","highlight_start":1,"highlight_end":1},{"text":"                        ONCE.call_once(|| {","highlight_start":1,"highlight_end":1},{"text":"                            DATA = transmute::<Box<$T>, *const $T>(","highlight_start":1,"highlight_end":1},{"text":"                                Box::new(__static_ref_initialize()));","highlight_start":1,"highlight_end":1},{"text":"                        });","highlight_start":1,"highlight_end":1},{"text":"                        &*DATA","highlight_start":1,"highlight_end":1},{"text":"                    }","highlight_start":1,"highlight_end":1},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                    let static_ref = __stability();","highlight_start":1,"highlight_end":1},{"text":"                    require_sync(static_ref);","highlight_start":1,"highlight_end":1},{"text":"                    static_ref","highlight_start":1,"highlight_end":1},{"text":"                }","highlight_start":1,"highlight_end":1},{"text":"            }","highlight_start":1,"highlight_end":1},{"text":"        }","highlight_start":1,"highlight_end":1},{"text":"        lazy_static!($($t)*);","highlight_start":1,"highlight_end":1},{"text":"    };","highlight_start":1,"highlight_end":1},{"text":"    (MAKE TY, PUB, $(#[$attr:meta])*, $N:ident) => {","highlight_start":1,"highlight_end":1},{"text":"        #[allow(missing_copy_implementations)]","highlight_start":1,"highlight_end":1},{"text":"        #[allow(non_camel_case_types)]","highlight_start":1,"highlight_end":1},{"text":"        #[allow(dead_code)]","highlight_start":1,"highlight_end":1},{"text":"        $(#[$attr])*","highlight_start":1,"highlight_end":1},{"text":"        pub struct $N {__private_field: ()}","highlight_start":1,"highlight_end":1},{"text":"        #[doc(hidden)]","highlight_start":1,"highlight_end":1},{"text":"        pub static $N: $N = $N {__private_field: ()};","highlight_start":1,"highlight_end":1},{"text":"    };","highlight_start":1,"highlight_end":1},{"text":"    (MAKE TY, PRIV, $(#[$attr:meta])*, $N:ident) => {","highlight_start":1,"highlight_end":1},{"text":"        #[allow(missing_copy_implementations)]","highlight_start":1,"highlight_end":1},{"text":"        #[allow(non_camel_case_types)]","highlight_start":1,"highlight_end":1},{"text":"        #[allow(dead_code)]","highlight_start":1,"highlight_end":1},{"text":"        $(#[$attr])*","highlight_start":1,"highlight_end":1},{"text":"        struct $N {__private_field: ()}","highlight_start":1,"highlight_end":1},{"text":"        #[doc(hidden)]","highlight_start":1,"highlight_end":1},{"text":"        static $N: $N = $N {__private_field: ()};","highlight_start":1,"highlight_end":1},{"text":"    };","highlight_start":1,"highlight_end":1},{"text":"    () => ()","highlight_start":1,"highlight_end":1},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"lazy_static!","def_site_span":{"file_name":"/Users/ludwig/.cargo/registry/src/github.com-1ecc6299db9ec823/lazy_static-0.1.16/src/lib.rs","byte_start":1985,"byte_end":5163,"line_start":75,"line_end":157,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! lazy_static {","highlight_start":1,"highlight_end":27},{"text":"    ($(#[$attr:meta])* static ref $N:ident : $T:ty = $e:expr; $($t:tt)*) => {","highlight_start":1,"highlight_end":78},{"text":"        lazy_static!(PRIV, $(#[$attr])* static ref $N : $T = $e; $($t)*);","highlight_start":1,"highlight_end":74},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($(#[$attr:meta])* pub static ref $N:ident : $T:ty = $e:expr; $($t:tt)*) => {","highlight_start":1,"highlight_end":82},{"text":"        lazy_static!(PUB, $(#[$attr])* static ref $N : $T = $e; $($t)*);","highlight_start":1,"highlight_end":73},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($VIS:ident, $(#[$attr:meta])* static ref $N:ident : $T:ty = $e:expr; $($t:tt)*) => {","highlight_start":1,"highlight_end":90},{"text":"        lazy_static!(MAKE TY, $VIS, $(#[$attr])*, $N);","highlight_start":1,"highlight_end":55},{"text":"        impl ::std::ops::Deref for $N {","highlight_start":1,"highlight_end":40},{"text":"            type Target = $T;","highlight_start":1,"highlight_end":30},{"text":"            fn deref<'a>(&'a self) -> &'a $T {","highlight_start":1,"highlight_end":47},{"text":"                #[inline(always)]","highlight_start":1,"highlight_end":34},{"text":"                fn __static_ref_initialize() -> $T { $e }","highlight_start":1,"highlight_end":58},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                unsafe {","highlight_start":1,"highlight_end":25},{"text":"                    use std::sync::{Once, ONCE_INIT};","highlight_start":1,"highlight_end":54},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                    #[inline(always)]","highlight_start":1,"highlight_end":38},{"text":"                    fn require_sync<T: Sync>(_: &T) { }","highlight_start":1,"highlight_end":56},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                    #[inline(always)]","highlight_start":1,"highlight_end":38},{"text":"                    #[cfg(feature=\"nightly\")]","highlight_start":1,"highlight_end":46},{"text":"                    unsafe fn __stability() -> &'static $T {","highlight_start":1,"highlight_end":61},{"text":"                        use std::cell::UnsafeCell;","highlight_start":1,"highlight_end":51},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                        struct SyncCell(UnsafeCell<Option<$T>>);","highlight_start":1,"highlight_end":65},{"text":"                        unsafe impl Sync for SyncCell {}","highlight_start":1,"highlight_end":57},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                        static DATA: SyncCell = SyncCell(UnsafeCell::new(None));","highlight_start":1,"highlight_end":81},{"text":"                        static ONCE: Once = ONCE_INIT;","highlight_start":1,"highlight_end":55},{"text":"                        ONCE.call_once(|| {","highlight_start":1,"highlight_end":44},{"text":"                            *DATA.0.get() = Some(__static_ref_initialize());","highlight_start":1,"highlight_end":77},{"text":"                        });","highlight_start":1,"highlight_end":28},{"text":"                        match *DATA.0.get() {","highlight_start":1,"highlight_end":46},{"text":"                            Some(ref x) => x,","highlight_start":1,"highlight_end":46},{"text":"                            None => ::std::intrinsics::unreachable(),","highlight_start":1,"highlight_end":70},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                    #[inline(always)]","highlight_start":1,"highlight_end":38},{"text":"                    #[cfg(not(feature=\"nightly\"))]","highlight_start":1,"highlight_end":51},{"text":"                    unsafe fn __stability() -> &'static $T {","highlight_start":1,"highlight_end":61},{"text":"                        use std::mem::transmute;","highlight_start":1,"highlight_end":49},{"text":"                        use std::boxed::Box;","highlight_start":1,"highlight_end":45},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                        static mut DATA: *const $T = 0 as *const $T;","highlight_start":1,"highlight_end":69},{"text":"                        static mut ONCE: Once = ONCE_INIT;","highlight_start":1,"highlight_end":59},{"text":"                        ONCE.call_once(|| {","highlight_start":1,"highlight_end":44},{"text":"                            DATA = transmute::<Box<$T>, *const $T>(","highlight_start":1,"highlight_end":68},{"text":"                                Box::new(__static_ref_initialize()));","highlight_start":1,"highlight_end":70},{"text":"                        });","highlight_start":1,"highlight_end":28},{"text":"                        &*DATA","highlight_start":1,"highlight_end":31},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                    let static_ref = __stability();","highlight_start":1,"highlight_end":52},{"text":"                    require_sync(static_ref);","highlight_start":1,"highlight_end":46},{"text":"                    static_ref","highlight_start":1,"highlight_end":31},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"        lazy_static!($($t)*);","highlight_start":1,"highlight_end":30},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (MAKE TY, PUB, $(#[$attr:meta])*, $N:ident) => {","highlight_start":1,"highlight_end":53},{"text":"        #[allow(missing_copy_implementations)]","highlight_start":1,"highlight_end":47},{"text":"        #[allow(non_camel_case_types)]","highlight_start":1,"highlight_end":39},{"text":"        #[allow(dead_code)]","highlight_start":1,"highlight_end":28},{"text":"        $(#[$attr])*","highlight_start":1,"highlight_end":21},{"text":"        pub struct $N {__private_field: ()}","highlight_start":1,"highlight_end":44},{"text":"        #[doc(hidden)]","highlight_start":1,"highlight_end":23},{"text":"        pub static $N: $N = $N {__private_field: ()};","highlight_start":1,"highlight_end":54},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (MAKE TY, PRIV, $(#[$attr:meta])*, $N:ident) => {","highlight_start":1,"highlight_end":54},{"text":"        #[allow(missing_copy_implementations)]","highlight_start":1,"highlight_end":47},{"text":"        #[allow(non_camel_case_types)]","highlight_start":1,"highlight_end":39},{"text":"        #[allow(dead_code)]","highlight_start":1,"highlight_end":28},{"text":"        $(#[$attr])*","highlight_start":1,"highlight_end":21},{"text":"        struct $N {__private_field: ()}","highlight_start":1,"highlight_end":40},{"text":"        #[doc(hidden)]","highlight_start":1,"highlight_end":23},{"text":"        static $N: $N = $N {__private_field: ()};","highlight_start":1,"highlight_end":50},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    () => ()","highlight_start":1,"highlight_end":13},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: use of deprecated item 'std::sync::ONCE_INIT': the `new` function is now preferred\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/ludwig/Dev/UnicornConsole/unicorn/src/unicorn/mod.rs:123:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m123\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mlazy_static! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m124\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub static ref PALETTE: Mutex<Palette> = {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m125\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        Mutex::new(Palette::new())\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m126\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    };\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m127\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"use of deprecated item 'std::sync::ONCE_INIT': the `new` function is now preferred","code":{"code":"deprecated","explanation":null},"level":"warning","spans":[{"file_name":"/Users/ludwig/.cargo/registry/src/github.com-1ecc6299db9ec823/lazy_static-0.1.16/src/lib.rs","byte_start":4041,"byte_end":4050,"line_start":122,"line_end":122,"column_start":49,"column_end":58,"is_primary":true,"text":[{"text":"                        static mut ONCE: Once = ONCE_INIT;","highlight_start":49,"highlight_end":58}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/ludwig/.cargo/registry/src/github.com-1ecc6299db9ec823/lazy_static-0.1.16/src/lib.rs","byte_start":2261,"byte_end":2325,"line_start":80,"line_end":80,"column_start":9,"column_end":73,"is_primary":false,"text":[{"text":"        lazy_static!(PUB, $(#[$attr])* static ref $N : $T = $e; $($t)*);","highlight_start":9,"highlight_end":73}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/ludwig/Dev/UnicornConsole/unicorn/src/unicorn/mod.rs","byte_start":2827,"byte_end":2932,"line_start":123,"line_end":127,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"lazy_static! {","highlight_start":1,"highlight_end":15},{"text":"    pub static ref PALETTE: Mutex<Palette> = {","highlight_start":1,"highlight_end":47},{"text":"        Mutex::new(Palette::new())","highlight_start":1,"highlight_end":35},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"lazy_static!","def_site_span":{"file_name":"/Users/ludwig/.cargo/registry/src/github.com-1ecc6299db9ec823/lazy_static-0.1.16/src/lib.rs","byte_start":1985,"byte_end":5163,"line_start":75,"line_end":157,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! lazy_static {","highlight_start":1,"highlight_end":27},{"text":"    ($(#[$attr:meta])* static ref $N:ident : $T:ty = $e:expr; $($t:tt)*) => {","highlight_start":1,"highlight_end":78},{"text":"        lazy_static!(PRIV, $(#[$attr])* static ref $N : $T = $e; $($t)*);","highlight_start":1,"highlight_end":74},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($(#[$attr:meta])* pub static ref $N:ident : $T:ty = $e:expr; $($t:tt)*) => {","highlight_start":1,"highlight_end":82},{"text":"        lazy_static!(PUB, $(#[$attr])* static ref $N : $T = $e; $($t)*);","highlight_start":1,"highlight_end":73},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($VIS:ident, $(#[$attr:meta])* static ref $N:ident : $T:ty = $e:expr; $($t:tt)*) => {","highlight_start":1,"highlight_end":90},{"text":"        lazy_static!(MAKE TY, $VIS, $(#[$attr])*, $N);","highlight_start":1,"highlight_end":55},{"text":"        impl ::std::ops::Deref for $N {","highlight_start":1,"highlight_end":40},{"text":"            type Target = $T;","highlight_start":1,"highlight_end":30},{"text":"            fn deref<'a>(&'a self) -> &'a $T {","highlight_start":1,"highlight_end":47},{"text":"                #[inline(always)]","highlight_start":1,"highlight_end":34},{"text":"                fn __static_ref_initialize() -> $T { $e }","highlight_start":1,"highlight_end":58},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                unsafe {","highlight_start":1,"highlight_end":25},{"text":"                    use std::sync::{Once, ONCE_INIT};","highlight_start":1,"highlight_end":54},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                    #[inline(always)]","highlight_start":1,"highlight_end":38},{"text":"                    fn require_sync<T: Sync>(_: &T) { }","highlight_start":1,"highlight_end":56},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                    #[inline(always)]","highlight_start":1,"highlight_end":38},{"text":"                    #[cfg(feature=\"nightly\")]","highlight_start":1,"highlight_end":46},{"text":"                    unsafe fn __stability() -> &'static $T {","highlight_start":1,"highlight_end":61},{"text":"                        use std::cell::UnsafeCell;","highlight_start":1,"highlight_end":51},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                        struct SyncCell(UnsafeCell<Option<$T>>);","highlight_start":1,"highlight_end":65},{"text":"                        unsafe impl Sync for SyncCell {}","highlight_start":1,"highlight_end":57},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                        static DATA: SyncCell = SyncCell(UnsafeCell::new(None));","highlight_start":1,"highlight_end":81},{"text":"                        static ONCE: Once = ONCE_INIT;","highlight_start":1,"highlight_end":55},{"text":"                        ONCE.call_once(|| {","highlight_start":1,"highlight_end":44},{"text":"                            *DATA.0.get() = Some(__static_ref_initialize());","highlight_start":1,"highlight_end":77},{"text":"                        });","highlight_start":1,"highlight_end":28},{"text":"                        match *DATA.0.get() {","highlight_start":1,"highlight_end":46},{"text":"                            Some(ref x) => x,","highlight_start":1,"highlight_end":46},{"text":"                            None => ::std::intrinsics::unreachable(),","highlight_start":1,"highlight_end":70},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                    #[inline(always)]","highlight_start":1,"highlight_end":38},{"text":"                    #[cfg(not(feature=\"nightly\"))]","highlight_start":1,"highlight_end":51},{"text":"                    unsafe fn __stability() -> &'static $T {","highlight_start":1,"highlight_end":61},{"text":"                        use std::mem::transmute;","highlight_start":1,"highlight_end":49},{"text":"                        use std::boxed::Box;","highlight_start":1,"highlight_end":45},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                        static mut DATA: *const $T = 0 as *const $T;","highlight_start":1,"highlight_end":69},{"text":"                        static mut ONCE: Once = ONCE_INIT;","highlight_start":1,"highlight_end":59},{"text":"                        ONCE.call_once(|| {","highlight_start":1,"highlight_end":44},{"text":"                            DATA = transmute::<Box<$T>, *const $T>(","highlight_start":1,"highlight_end":68},{"text":"                                Box::new(__static_ref_initialize()));","highlight_start":1,"highlight_end":70},{"text":"                        });","highlight_start":1,"highlight_end":28},{"text":"                        &*DATA","highlight_start":1,"highlight_end":31},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                    let static_ref = __stability();","highlight_start":1,"highlight_end":52},{"text":"                    require_sync(static_ref);","highlight_start":1,"highlight_end":46},{"text":"                    static_ref","highlight_start":1,"highlight_end":31},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"        lazy_static!($($t)*);","highlight_start":1,"highlight_end":30},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (MAKE TY, PUB, $(#[$attr:meta])*, $N:ident) => {","highlight_start":1,"highlight_end":53},{"text":"        #[allow(missing_copy_implementations)]","highlight_start":1,"highlight_end":47},{"text":"        #[allow(non_camel_case_types)]","highlight_start":1,"highlight_end":39},{"text":"        #[allow(dead_code)]","highlight_start":1,"highlight_end":28},{"text":"        $(#[$attr])*","highlight_start":1,"highlight_end":21},{"text":"        pub struct $N {__private_field: ()}","highlight_start":1,"highlight_end":44},{"text":"        #[doc(hidden)]","highlight_start":1,"highlight_end":23},{"text":"        pub static $N: $N = $N {__private_field: ()};","highlight_start":1,"highlight_end":54},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (MAKE TY, PRIV, $(#[$attr:meta])*, $N:ident) => {","highlight_start":1,"highlight_end":54},{"text":"        #[allow(missing_copy_implementations)]","highlight_start":1,"highlight_end":47},{"text":"        #[allow(non_camel_case_types)]","highlight_start":1,"highlight_end":39},{"text":"        #[allow(dead_code)]","highlight_start":1,"highlight_end":28},{"text":"        $(#[$attr])*","highlight_start":1,"highlight_end":21},{"text":"        struct $N {__private_field: ()}","highlight_start":1,"highlight_end":40},{"text":"        #[doc(hidden)]","highlight_start":1,"highlight_end":23},{"text":"        static $N: $N = $N {__private_field: ()};","highlight_start":1,"highlight_end":50},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    () => ()","highlight_start":1,"highlight_end":13},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"lazy_static!","def_site_span":{"file_name":"/Users/ludwig/.cargo/registry/src/github.com-1ecc6299db9ec823/lazy_static-0.1.16/src/lib.rs","byte_start":1985,"byte_end":5163,"line_start":75,"line_end":157,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! lazy_static {","highlight_start":1,"highlight_end":27},{"text":"    ($(#[$attr:meta])* static ref $N:ident : $T:ty = $e:expr; $($t:tt)*) => {","highlight_start":1,"highlight_end":78},{"text":"        lazy_static!(PRIV, $(#[$attr])* static ref $N : $T = $e; $($t)*);","highlight_start":1,"highlight_end":74},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($(#[$attr:meta])* pub static ref $N:ident : $T:ty = $e:expr; $($t:tt)*) => {","highlight_start":1,"highlight_end":82},{"text":"        lazy_static!(PUB, $(#[$attr])* static ref $N : $T = $e; $($t)*);","highlight_start":1,"highlight_end":73},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($VIS:ident, $(#[$attr:meta])* static ref $N:ident : $T:ty = $e:expr; $($t:tt)*) => {","highlight_start":1,"highlight_end":90},{"text":"        lazy_static!(MAKE TY, $VIS, $(#[$attr])*, $N);","highlight_start":1,"highlight_end":55},{"text":"        impl ::std::ops::Deref for $N {","highlight_start":1,"highlight_end":40},{"text":"            type Target = $T;","highlight_start":1,"highlight_end":30},{"text":"            fn deref<'a>(&'a self) -> &'a $T {","highlight_start":1,"highlight_end":47},{"text":"                #[inline(always)]","highlight_start":1,"highlight_end":34},{"text":"                fn __static_ref_initialize() -> $T { $e }","highlight_start":1,"highlight_end":58},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                unsafe {","highlight_start":1,"highlight_end":25},{"text":"                    use std::sync::{Once, ONCE_INIT};","highlight_start":1,"highlight_end":54},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                    #[inline(always)]","highlight_start":1,"highlight_end":38},{"text":"                    fn require_sync<T: Sync>(_: &T) { }","highlight_start":1,"highlight_end":56},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                    #[inline(always)]","highlight_start":1,"highlight_end":38},{"text":"                    #[cfg(feature=\"nightly\")]","highlight_start":1,"highlight_end":46},{"text":"                    unsafe fn __stability() -> &'static $T {","highlight_start":1,"highlight_end":61},{"text":"                        use std::cell::UnsafeCell;","highlight_start":1,"highlight_end":51},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                        struct SyncCell(UnsafeCell<Option<$T>>);","highlight_start":1,"highlight_end":65},{"text":"                        unsafe impl Sync for SyncCell {}","highlight_start":1,"highlight_end":57},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                        static DATA: SyncCell = SyncCell(UnsafeCell::new(None));","highlight_start":1,"highlight_end":81},{"text":"                        static ONCE: Once = ONCE_INIT;","highlight_start":1,"highlight_end":55},{"text":"                        ONCE.call_once(|| {","highlight_start":1,"highlight_end":44},{"text":"                            *DATA.0.get() = Some(__static_ref_initialize());","highlight_start":1,"highlight_end":77},{"text":"                        });","highlight_start":1,"highlight_end":28},{"text":"                        match *DATA.0.get() {","highlight_start":1,"highlight_end":46},{"text":"                            Some(ref x) => x,","highlight_start":1,"highlight_end":46},{"text":"                            None => ::std::intrinsics::unreachable(),","highlight_start":1,"highlight_end":70},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                    #[inline(always)]","highlight_start":1,"highlight_end":38},{"text":"                    #[cfg(not(feature=\"nightly\"))]","highlight_start":1,"highlight_end":51},{"text":"                    unsafe fn __stability() -> &'static $T {","highlight_start":1,"highlight_end":61},{"text":"                        use std::mem::transmute;","highlight_start":1,"highlight_end":49},{"text":"                        use std::boxed::Box;","highlight_start":1,"highlight_end":45},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                        static mut DATA: *const $T = 0 as *const $T;","highlight_start":1,"highlight_end":69},{"text":"                        static mut ONCE: Once = ONCE_INIT;","highlight_start":1,"highlight_end":59},{"text":"                        ONCE.call_once(|| {","highlight_start":1,"highlight_end":44},{"text":"                            DATA = transmute::<Box<$T>, *const $T>(","highlight_start":1,"highlight_end":68},{"text":"                                Box::new(__static_ref_initialize()));","highlight_start":1,"highlight_end":70},{"text":"                        });","highlight_start":1,"highlight_end":28},{"text":"                        &*DATA","highlight_start":1,"highlight_end":31},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                    let static_ref = __stability();","highlight_start":1,"highlight_end":52},{"text":"                    require_sync(static_ref);","highlight_start":1,"highlight_end":46},{"text":"                    static_ref","highlight_start":1,"highlight_end":31},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"        lazy_static!($($t)*);","highlight_start":1,"highlight_end":30},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (MAKE TY, PUB, $(#[$attr:meta])*, $N:ident) => {","highlight_start":1,"highlight_end":53},{"text":"        #[allow(missing_copy_implementations)]","highlight_start":1,"highlight_end":47},{"text":"        #[allow(non_camel_case_types)]","highlight_start":1,"highlight_end":39},{"text":"        #[allow(dead_code)]","highlight_start":1,"highlight_end":28},{"text":"        $(#[$attr])*","highlight_start":1,"highlight_end":21},{"text":"        pub struct $N {__private_field: ()}","highlight_start":1,"highlight_end":44},{"text":"        #[doc(hidden)]","highlight_start":1,"highlight_end":23},{"text":"        pub static $N: $N = $N {__private_field: ()};","highlight_start":1,"highlight_end":54},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (MAKE TY, PRIV, $(#[$attr:meta])*, $N:ident) => {","highlight_start":1,"highlight_end":54},{"text":"        #[allow(missing_copy_implementations)]","highlight_start":1,"highlight_end":47},{"text":"        #[allow(non_camel_case_types)]","highlight_start":1,"highlight_end":39},{"text":"        #[allow(dead_code)]","highlight_start":1,"highlight_end":28},{"text":"        $(#[$attr])*","highlight_start":1,"highlight_end":21},{"text":"        struct $N {__private_field: ()}","highlight_start":1,"highlight_end":40},{"text":"        #[doc(hidden)]","highlight_start":1,"highlight_end":23},{"text":"        static $N: $N = $N {__private_field: ()};","highlight_start":1,"highlight_end":50},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    () => ()","highlight_start":1,"highlight_end":13},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: use of deprecated item 'std::sync::ONCE_INIT': the `new` function is now preferred\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/ludwig/Dev/UnicornConsole/unicorn/src/unicorn/mod.rs:123:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m123\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mlazy_static! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m124\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub static ref PALETTE: Mutex<Palette> = {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m125\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        Mutex::new(Palette::new())\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m126\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    };\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m127\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"use of deprecated item 'std::env::home_dir': This function's behavior is unexpected and probably not what you want. Consider using the home_dir function from https://crates.io/crates/dirs instead.","code":{"code":"deprecated","explanation":null},"level":"warning","spans":[{"file_name":"/Users/ludwig/Dev/UnicornConsole/unicorn/src/editor/text_editor/mod.rs","byte_start":3974,"byte_end":3987,"line_start":160,"line_end":160,"column_start":31,"column_end":44,"is_primary":true,"text":[{"text":"        let mut subl_config = env::home_dir().unwrap();","highlight_start":31,"highlight_end":44}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: use of deprecated item 'std::env::home_dir': This function's behavior is unexpected and probably not what you want. Consider using the home_dir function from https://crates.io/crates/dirs instead.\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/ludwig/Dev/UnicornConsole/unicorn/src/editor/text_editor/mod.rs:160:31\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m160\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        let mut subl_config = env::home_dir().unwrap();\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                              \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^\u001b[0m\n\n"}
{"message":"no method named `set` found for struct `gif::Encoder<&mut std::fs::File>` in the current scope","code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n"},"level":"error","spans":[{"file_name":"/Users/ludwig/Dev/UnicornConsole/unicorn/src/unicorn/mod.rs","byte_start":29218,"byte_end":29221,"line_start":951,"line_end":951,"column_start":17,"column_end":20,"is_primary":true,"text":[{"text":"        encoder.set(gif::Repeat::Infinite).unwrap();","highlight_start":17,"highlight_end":20}],"label":"method not found in `gif::Encoder<&mut std::fs::File>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/Users/ludwig/.cargo/registry/src/github.com-1ecc6299db9ec823/gif-0.9.2/src/traits.rs","byte_start":643,"byte_end":646,"line_start":20,"line_end":20,"column_start":8,"column_end":11,"is_primary":false,"text":[{"text":"    fn set<T: Parameter<Self>>(&mut self, value: T) -> <T as Parameter<Self>>::Result {","highlight_start":8,"highlight_end":11}],"label":"the method is available for `std::boxed::Box<gif::Encoder<&mut std::fs::File>>` here","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/Users/ludwig/.cargo/registry/src/github.com-1ecc6299db9ec823/gif-0.9.2/src/traits.rs","byte_start":643,"byte_end":646,"line_start":20,"line_end":20,"column_start":8,"column_end":11,"is_primary":false,"text":[{"text":"    fn set<T: Parameter<Self>>(&mut self, value: T) -> <T as Parameter<Self>>::Result {","highlight_start":8,"highlight_end":11}],"label":"the method is available for `std::pin::Pin<gif::Encoder<&mut std::fs::File>>` here","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/Users/ludwig/.cargo/registry/src/github.com-1ecc6299db9ec823/gif-0.9.2/src/traits.rs","byte_start":643,"byte_end":646,"line_start":20,"line_end":20,"column_start":8,"column_end":11,"is_primary":false,"text":[{"text":"    fn set<T: Parameter<Self>>(&mut self, value: T) -> <T as Parameter<Self>>::Result {","highlight_start":8,"highlight_end":11}],"label":"the method is available for `std::sync::Arc<gif::Encoder<&mut std::fs::File>>` here","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/Users/ludwig/.cargo/registry/src/github.com-1ecc6299db9ec823/gif-0.9.2/src/traits.rs","byte_start":643,"byte_end":646,"line_start":20,"line_end":20,"column_start":8,"column_end":11,"is_primary":false,"text":[{"text":"    fn set<T: Parameter<Self>>(&mut self, value: T) -> <T as Parameter<Self>>::Result {","highlight_start":8,"highlight_end":11}],"label":"the method is available for `std::rc::Rc<gif::Encoder<&mut std::fs::File>>` here","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"items from traits can only be used if the trait is in scope","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"the following trait is implemented but not in scope; perhaps add a `use` for it:\n`use gif::SetParameter;`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0599]\u001b[0m\u001b[0m\u001b[1m: no method named `set` found for struct `gif::Encoder<&mut std::fs::File>` in the current scope\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/ludwig/Dev/UnicornConsole/unicorn/src/unicorn/mod.rs:951:17\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m951\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        encoder.set(gif::Repeat::Infinite).unwrap();\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mmethod not found in `gif::Encoder<&mut std::fs::File>`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/ludwig/.cargo/registry/src/github.com-1ecc6299db9ec823/gif-0.9.2/src/traits.rs:20:8\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m20\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    fn set<T: Parameter<Self>>(&mut self, value: T) -> <T as Parameter<Self>>::Result {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthe method is available for `std::boxed::Box<gif::Encoder<&mut std::fs::File>>` here\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthe method is available for `std::pin::Pin<gif::Encoder<&mut std::fs::File>>` here\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthe method is available for `std::sync::Arc<gif::Encoder<&mut std::fs::File>>` here\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthe method is available for `std::rc::Rc<gif::Encoder<&mut std::fs::File>>` here\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: items from traits can only be used if the trait is in scope\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the following trait is implemented but not in scope; perhaps add a `use` for it:\u001b[0m\n\u001b[0m            `use gif::SetParameter;`\u001b[0m\n\n"}
{"message":"unused import: `unicode_width::UnicodeWidthChar`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"/Users/ludwig/Dev/UnicornConsole/unicorn/src/editor/text_editor/view.rs","byte_start":92,"byte_end":123,"line_start":6,"line_end":6,"column_start":5,"column_end":36,"is_primary":true,"text":[{"text":"use unicode_width::UnicodeWidthChar;","highlight_start":5,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(unused_imports)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused import: `unicode_width::UnicodeWidthChar`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/ludwig/Dev/UnicornConsole/unicorn/src/editor/text_editor/view.rs:6:5\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m6\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0muse unicode_width::UnicodeWidthChar;\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(unused_imports)]` on by default\u001b[0m\n\n"}
{"message":"aborting due to previous error; 39 warnings emitted","code":null,"level":"error","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: aborting due to previous error; 39 warnings emitted\u001b[0m\n\n"}
{"message":"For more information about this error, try `rustc --explain E0599`.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mFor more information about this error, try `rustc --explain E0599`.\u001b[0m\n"}
