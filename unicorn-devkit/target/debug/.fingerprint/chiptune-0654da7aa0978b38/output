{"message":"redundant field names in struct initialization","code":{"code":"clippy::redundant_field_names","explanation":null},"level":"warning","spans":[{"file_name":"/Users/ludwig/Dev/UnicornConsole/unicorn/src/chiptune/src/lib.rs","byte_start":2697,"byte_end":2711,"line_start":120,"line_end":120,"column_start":9,"column_end":23,"is_primary":true,"text":[{"text":"        opcode: opcode,","highlight_start":9,"highlight_end":23}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(clippy::redundant_field_names)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#redundant_field_names","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"replace it with","code":null,"level":"help","spans":[{"file_name":"/Users/ludwig/Dev/UnicornConsole/unicorn/src/chiptune/src/lib.rs","byte_start":2697,"byte_end":2711,"line_start":120,"line_end":120,"column_start":9,"column_end":23,"is_primary":true,"text":[{"text":"        opcode: opcode,","highlight_start":9,"highlight_end":23}],"label":null,"suggested_replacement":"opcode","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: redundant field names in struct initialization\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/ludwig/Dev/UnicornConsole/unicorn/src/chiptune/src/lib.rs:120:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m120\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        opcode: opcode,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: replace it with: `opcode`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(clippy::redundant_field_names)]` on by default\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#redundant_field_names\u001b[0m\n\n"}
{"message":"redundant field names in struct initialization","code":{"code":"clippy::redundant_field_names","explanation":null},"level":"warning","spans":[{"file_name":"/Users/ludwig/Dev/UnicornConsole/unicorn/src/chiptune/src/lib.rs","byte_start":2721,"byte_end":2731,"line_start":121,"line_end":121,"column_start":9,"column_end":19,"is_primary":true,"text":[{"text":"        mask: mask,","highlight_start":9,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#redundant_field_names","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"replace it with","code":null,"level":"help","spans":[{"file_name":"/Users/ludwig/Dev/UnicornConsole/unicorn/src/chiptune/src/lib.rs","byte_start":2721,"byte_end":2731,"line_start":121,"line_end":121,"column_start":9,"column_end":19,"is_primary":true,"text":[{"text":"        mask: mask,","highlight_start":9,"highlight_end":19}],"label":null,"suggested_replacement":"mask","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: redundant field names in struct initialization\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/ludwig/Dev/UnicornConsole/unicorn/src/chiptune/src/lib.rs:121:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m121\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        mask: mask,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: replace it with: `mask`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#redundant_field_names\u001b[0m\n\n"}
{"message":"redundant field names in struct initialization","code":{"code":"clippy::redundant_field_names","explanation":null},"level":"warning","spans":[{"file_name":"/Users/ludwig/Dev/UnicornConsole/unicorn/src/chiptune/src/lib.rs","byte_start":2819,"byte_end":2829,"line_start":124,"line_end":124,"column_start":9,"column_end":19,"is_primary":true,"text":[{"text":"        minv: minv,","highlight_start":9,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#redundant_field_names","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"replace it with","code":null,"level":"help","spans":[{"file_name":"/Users/ludwig/Dev/UnicornConsole/unicorn/src/chiptune/src/lib.rs","byte_start":2819,"byte_end":2829,"line_start":124,"line_end":124,"column_start":9,"column_end":19,"is_primary":true,"text":[{"text":"        minv: minv,","highlight_start":9,"highlight_end":19}],"label":null,"suggested_replacement":"minv","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: redundant field names in struct initialization\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/ludwig/Dev/UnicornConsole/unicorn/src/chiptune/src/lib.rs:124:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m124\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        minv: minv,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: replace it with: `minv`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#redundant_field_names\u001b[0m\n\n"}
{"message":"redundant field names in struct initialization","code":{"code":"clippy::redundant_field_names","explanation":null},"level":"warning","spans":[{"file_name":"/Users/ludwig/Dev/UnicornConsole/unicorn/src/chiptune/src/lib.rs","byte_start":2839,"byte_end":2849,"line_start":125,"line_end":125,"column_start":9,"column_end":19,"is_primary":true,"text":[{"text":"        maxv: maxv,","highlight_start":9,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#redundant_field_names","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"replace it with","code":null,"level":"help","spans":[{"file_name":"/Users/ludwig/Dev/UnicornConsole/unicorn/src/chiptune/src/lib.rs","byte_start":2839,"byte_end":2849,"line_start":125,"line_end":125,"column_start":9,"column_end":19,"is_primary":true,"text":[{"text":"        maxv: maxv,","highlight_start":9,"highlight_end":19}],"label":null,"suggested_replacement":"maxv","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: redundant field names in struct initialization\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/ludwig/Dev/UnicornConsole/unicorn/src/chiptune/src/lib.rs:125:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m125\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        maxv: maxv,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: replace it with: `maxv`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#redundant_field_names\u001b[0m\n\n"}
{"message":"unneeded `return` statement","code":{"code":"clippy::needless_return","explanation":null},"level":"warning","spans":[{"file_name":"/Users/ludwig/Dev/UnicornConsole/unicorn/src/chiptune/src/lib.rs","byte_start":14056,"byte_end":14131,"line_start":348,"line_end":348,"column_start":9,"column_end":84,"is_primary":true,"text":[{"text":"        return ffi::Chiptune_PlaySound(self.P, sound.S, chan, note, panning, rate);","highlight_start":9,"highlight_end":84}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(clippy::needless_return)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"remove `return`","code":null,"level":"help","spans":[{"file_name":"/Users/ludwig/Dev/UnicornConsole/unicorn/src/chiptune/src/lib.rs","byte_start":14056,"byte_end":14131,"line_start":348,"line_end":348,"column_start":9,"column_end":84,"is_primary":true,"text":[{"text":"        return ffi::Chiptune_PlaySound(self.P, sound.S, chan, note, panning, rate);","highlight_start":9,"highlight_end":84}],"label":null,"suggested_replacement":"ffi::Chiptune_PlaySound(self.P, sound.S, chan, note, panning, rate)","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unneeded `return` statement\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/ludwig/Dev/UnicornConsole/unicorn/src/chiptune/src/lib.rs:348:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m348\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        return ffi::Chiptune_PlaySound(self.P, sound.S, chan, note, panning, rate);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: remove `return`: `ffi::Chiptune_PlaySound(self.P, sound.S, chan, note, panning, rate)`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(clippy::needless_return)]` on by default\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return\u001b[0m\n\n"}
{"message":"unneeded `return` statement","code":{"code":"clippy::needless_return","explanation":null},"level":"warning","spans":[{"file_name":"/Users/ludwig/Dev/UnicornConsole/unicorn/src/chiptune/src/lib.rs","byte_start":14846,"byte_end":14905,"line_start":377,"line_end":377,"column_start":9,"column_end":68,"is_primary":true,"text":[{"text":"        return ((*sound.S).flags & ffi::MUS_INST_DRUM as u32) != 0;","highlight_start":9,"highlight_end":68}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"remove `return`","code":null,"level":"help","spans":[{"file_name":"/Users/ludwig/Dev/UnicornConsole/unicorn/src/chiptune/src/lib.rs","byte_start":14846,"byte_end":14905,"line_start":377,"line_end":377,"column_start":9,"column_end":68,"is_primary":true,"text":[{"text":"        return ((*sound.S).flags & ffi::MUS_INST_DRUM as u32) != 0;","highlight_start":9,"highlight_end":68}],"label":null,"suggested_replacement":"((*sound.S).flags & ffi::MUS_INST_DRUM as u32) != 0","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unneeded `return` statement\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/ludwig/Dev/UnicornConsole/unicorn/src/chiptune/src/lib.rs:377:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m377\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        return ((*sound.S).flags & ffi::MUS_INST_DRUM as u32) != 0;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: remove `return`: `((*sound.S).flags & ffi::MUS_INST_DRUM as u32) != 0`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return\u001b[0m\n\n"}
{"message":"unneeded `return` statement","code":{"code":"clippy::needless_return","explanation":null},"level":"warning","spans":[{"file_name":"/Users/ludwig/Dev/UnicornConsole/unicorn/src/chiptune/src/lib.rs","byte_start":15205,"byte_end":15220,"line_start":388,"line_end":388,"column_start":11,"column_end":26,"is_primary":true,"text":[{"text":"          return str_buf;","highlight_start":11,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"remove `return`","code":null,"level":"help","spans":[{"file_name":"/Users/ludwig/Dev/UnicornConsole/unicorn/src/chiptune/src/lib.rs","byte_start":15205,"byte_end":15220,"line_start":388,"line_end":388,"column_start":11,"column_end":26,"is_primary":true,"text":[{"text":"          return str_buf;","highlight_start":11,"highlight_end":26}],"label":null,"suggested_replacement":"str_buf","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unneeded `return` statement\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/ludwig/Dev/UnicornConsole/unicorn/src/chiptune/src/lib.rs:388:11\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m388\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m          return str_buf;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m          \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: remove `return`: `str_buf`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return\u001b[0m\n\n"}
{"message":"unneeded `return` statement","code":{"code":"clippy::needless_return","explanation":null},"level":"warning","spans":[{"file_name":"/Users/ludwig/Dev/UnicornConsole/unicorn/src/chiptune/src/lib.rs","byte_start":15475,"byte_end":15544,"line_start":401,"line_end":401,"column_start":9,"column_end":78,"is_primary":true,"text":[{"text":"        return ((*sound.S).cydflags & ffi::CYD_CHN_ENABLE_PULSE as u32) != 0;","highlight_start":9,"highlight_end":78}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"remove `return`","code":null,"level":"help","spans":[{"file_name":"/Users/ludwig/Dev/UnicornConsole/unicorn/src/chiptune/src/lib.rs","byte_start":15475,"byte_end":15544,"line_start":401,"line_end":401,"column_start":9,"column_end":78,"is_primary":true,"text":[{"text":"        return ((*sound.S).cydflags & ffi::CYD_CHN_ENABLE_PULSE as u32) != 0;","highlight_start":9,"highlight_end":78}],"label":null,"suggested_replacement":"((*sound.S).cydflags & ffi::CYD_CHN_ENABLE_PULSE as u32) != 0","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unneeded `return` statement\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/ludwig/Dev/UnicornConsole/unicorn/src/chiptune/src/lib.rs:401:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m401\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        return ((*sound.S).cydflags & ffi::CYD_CHN_ENABLE_PULSE as u32) != 0;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: remove `return`: `((*sound.S).cydflags & ffi::CYD_CHN_ENABLE_PULSE as u32) != 0`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return\u001b[0m\n\n"}
{"message":"unneeded `return` statement","code":{"code":"clippy::needless_return","explanation":null},"level":"warning","spans":[{"file_name":"/Users/ludwig/Dev/UnicornConsole/unicorn/src/chiptune/src/lib.rs","byte_start":15792,"byte_end":15859,"line_start":413,"line_end":413,"column_start":9,"column_end":76,"is_primary":true,"text":[{"text":"        return ((*sound.S).cydflags & ffi::CYD_CHN_ENABLE_SAW as u32) != 0;","highlight_start":9,"highlight_end":76}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"remove `return`","code":null,"level":"help","spans":[{"file_name":"/Users/ludwig/Dev/UnicornConsole/unicorn/src/chiptune/src/lib.rs","byte_start":15792,"byte_end":15859,"line_start":413,"line_end":413,"column_start":9,"column_end":76,"is_primary":true,"text":[{"text":"        return ((*sound.S).cydflags & ffi::CYD_CHN_ENABLE_SAW as u32) != 0;","highlight_start":9,"highlight_end":76}],"label":null,"suggested_replacement":"((*sound.S).cydflags & ffi::CYD_CHN_ENABLE_SAW as u32) != 0","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unneeded `return` statement\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/ludwig/Dev/UnicornConsole/unicorn/src/chiptune/src/lib.rs:413:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m413\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        return ((*sound.S).cydflags & ffi::CYD_CHN_ENABLE_SAW as u32) != 0;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: remove `return`: `((*sound.S).cydflags & ffi::CYD_CHN_ENABLE_SAW as u32) != 0`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return\u001b[0m\n\n"}
{"message":"unneeded `return` statement","code":{"code":"clippy::needless_return","explanation":null},"level":"warning","spans":[{"file_name":"/Users/ludwig/Dev/UnicornConsole/unicorn/src/chiptune/src/lib.rs","byte_start":16113,"byte_end":16182,"line_start":425,"line_end":425,"column_start":9,"column_end":78,"is_primary":true,"text":[{"text":"        return ((*sound.S).cydflags & ffi::CYD_CHN_ENABLE_METAL as u32) != 0;","highlight_start":9,"highlight_end":78}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"remove `return`","code":null,"level":"help","spans":[{"file_name":"/Users/ludwig/Dev/UnicornConsole/unicorn/src/chiptune/src/lib.rs","byte_start":16113,"byte_end":16182,"line_start":425,"line_end":425,"column_start":9,"column_end":78,"is_primary":true,"text":[{"text":"        return ((*sound.S).cydflags & ffi::CYD_CHN_ENABLE_METAL as u32) != 0;","highlight_start":9,"highlight_end":78}],"label":null,"suggested_replacement":"((*sound.S).cydflags & ffi::CYD_CHN_ENABLE_METAL as u32) != 0","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unneeded `return` statement\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/ludwig/Dev/UnicornConsole/unicorn/src/chiptune/src/lib.rs:425:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m425\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        return ((*sound.S).cydflags & ffi::CYD_CHN_ENABLE_METAL as u32) != 0;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: remove `return`: `((*sound.S).cydflags & ffi::CYD_CHN_ENABLE_METAL as u32) != 0`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return\u001b[0m\n\n"}
{"message":"unneeded `return` statement","code":{"code":"clippy::needless_return","explanation":null},"level":"warning","spans":[{"file_name":"/Users/ludwig/Dev/UnicornConsole/unicorn/src/chiptune/src/lib.rs","byte_start":16436,"byte_end":16505,"line_start":437,"line_end":437,"column_start":9,"column_end":78,"is_primary":true,"text":[{"text":"        return ((*sound.S).cydflags & ffi::CYD_CHN_ENABLE_NOISE as u32) != 0;","highlight_start":9,"highlight_end":78}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"remove `return`","code":null,"level":"help","spans":[{"file_name":"/Users/ludwig/Dev/UnicornConsole/unicorn/src/chiptune/src/lib.rs","byte_start":16436,"byte_end":16505,"line_start":437,"line_end":437,"column_start":9,"column_end":78,"is_primary":true,"text":[{"text":"        return ((*sound.S).cydflags & ffi::CYD_CHN_ENABLE_NOISE as u32) != 0;","highlight_start":9,"highlight_end":78}],"label":null,"suggested_replacement":"((*sound.S).cydflags & ffi::CYD_CHN_ENABLE_NOISE as u32) != 0","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unneeded `return` statement\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/ludwig/Dev/UnicornConsole/unicorn/src/chiptune/src/lib.rs:437:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m437\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        return ((*sound.S).cydflags & ffi::CYD_CHN_ENABLE_NOISE as u32) != 0;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: remove `return`: `((*sound.S).cydflags & ffi::CYD_CHN_ENABLE_NOISE as u32) != 0`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return\u001b[0m\n\n"}
{"message":"unneeded `return` statement","code":{"code":"clippy::needless_return","explanation":null},"level":"warning","spans":[{"file_name":"/Users/ludwig/Dev/UnicornConsole/unicorn/src/chiptune/src/lib.rs","byte_start":16758,"byte_end":16830,"line_start":449,"line_end":449,"column_start":9,"column_end":81,"is_primary":true,"text":[{"text":"        return ((*sound.S).cydflags & ffi::CYD_CHN_ENABLE_TRIANGLE as u32) != 0;","highlight_start":9,"highlight_end":81}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"remove `return`","code":null,"level":"help","spans":[{"file_name":"/Users/ludwig/Dev/UnicornConsole/unicorn/src/chiptune/src/lib.rs","byte_start":16758,"byte_end":16830,"line_start":449,"line_end":449,"column_start":9,"column_end":81,"is_primary":true,"text":[{"text":"        return ((*sound.S).cydflags & ffi::CYD_CHN_ENABLE_TRIANGLE as u32) != 0;","highlight_start":9,"highlight_end":81}],"label":null,"suggested_replacement":"((*sound.S).cydflags & ffi::CYD_CHN_ENABLE_TRIANGLE as u32) != 0","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unneeded `return` statement\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/ludwig/Dev/UnicornConsole/unicorn/src/chiptune/src/lib.rs:449:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m449\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        return ((*sound.S).cydflags & ffi::CYD_CHN_ENABLE_TRIANGLE as u32) != 0;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: remove `return`: `((*sound.S).cydflags & ffi::CYD_CHN_ENABLE_TRIANGLE as u32) != 0`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return\u001b[0m\n\n"}
{"message":"unneeded `return` statement","code":{"code":"clippy::needless_return","explanation":null},"level":"warning","spans":[{"file_name":"/Users/ludwig/Dev/UnicornConsole/unicorn/src/chiptune/src/lib.rs","byte_start":17084,"byte_end":17157,"line_start":461,"line_end":461,"column_start":9,"column_end":82,"is_primary":true,"text":[{"text":"        return ((*sound.S).flags & ffi::MUS_INST_INVERT_VIBRATO_BIT as u32) != 0;","highlight_start":9,"highlight_end":82}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"remove `return`","code":null,"level":"help","spans":[{"file_name":"/Users/ludwig/Dev/UnicornConsole/unicorn/src/chiptune/src/lib.rs","byte_start":17084,"byte_end":17157,"line_start":461,"line_end":461,"column_start":9,"column_end":82,"is_primary":true,"text":[{"text":"        return ((*sound.S).flags & ffi::MUS_INST_INVERT_VIBRATO_BIT as u32) != 0;","highlight_start":9,"highlight_end":82}],"label":null,"suggested_replacement":"((*sound.S).flags & ffi::MUS_INST_INVERT_VIBRATO_BIT as u32) != 0","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unneeded `return` statement\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/ludwig/Dev/UnicornConsole/unicorn/src/chiptune/src/lib.rs:461:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m461\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        return ((*sound.S).flags & ffi::MUS_INST_INVERT_VIBRATO_BIT as u32) != 0;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: remove `return`: `((*sound.S).flags & ffi::MUS_INST_INVERT_VIBRATO_BIT as u32) != 0`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return\u001b[0m\n\n"}
{"message":"unneeded `return` statement","code":{"code":"clippy::needless_return","explanation":null},"level":"warning","spans":[{"file_name":"/Users/ludwig/Dev/UnicornConsole/unicorn/src/chiptune/src/lib.rs","byte_start":18000,"byte_end":18050,"line_start":503,"line_end":503,"column_start":9,"column_end":59,"is_primary":true,"text":[{"text":"        return ffi::Chiptune_GetMusicPlayPosition(self.P);","highlight_start":9,"highlight_end":59}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"remove `return`","code":null,"level":"help","spans":[{"file_name":"/Users/ludwig/Dev/UnicornConsole/unicorn/src/chiptune/src/lib.rs","byte_start":18000,"byte_end":18050,"line_start":503,"line_end":503,"column_start":9,"column_end":59,"is_primary":true,"text":[{"text":"        return ffi::Chiptune_GetMusicPlayPosition(self.P);","highlight_start":9,"highlight_end":59}],"label":null,"suggested_replacement":"ffi::Chiptune_GetMusicPlayPosition(self.P)","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unneeded `return` statement\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/ludwig/Dev/UnicornConsole/unicorn/src/chiptune/src/lib.rs:503:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m503\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        return ffi::Chiptune_GetMusicPlayPosition(self.P);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: remove `return`: `ffi::Chiptune_GetMusicPlayPosition(self.P)`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return\u001b[0m\n\n"}
{"message":"unneeded `return` statement","code":{"code":"clippy::needless_return","explanation":null},"level":"warning","spans":[{"file_name":"/Users/ludwig/Dev/UnicornConsole/unicorn/src/chiptune/src/lib.rs","byte_start":18154,"byte_end":18210,"line_start":509,"line_end":509,"column_start":9,"column_end":65,"is_primary":true,"text":[{"text":"        return ffi::Chiptune_GetSoundPlayPosition(self.P, chan);","highlight_start":9,"highlight_end":65}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"remove `return`","code":null,"level":"help","spans":[{"file_name":"/Users/ludwig/Dev/UnicornConsole/unicorn/src/chiptune/src/lib.rs","byte_start":18154,"byte_end":18210,"line_start":509,"line_end":509,"column_start":9,"column_end":65,"is_primary":true,"text":[{"text":"        return ffi::Chiptune_GetSoundPlayPosition(self.P, chan);","highlight_start":9,"highlight_end":65}],"label":null,"suggested_replacement":"ffi::Chiptune_GetSoundPlayPosition(self.P, chan)","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unneeded `return` statement\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/ludwig/Dev/UnicornConsole/unicorn/src/chiptune/src/lib.rs:509:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m509\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        return ffi::Chiptune_GetSoundPlayPosition(self.P, chan);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: remove `return`: `ffi::Chiptune_GetSoundPlayPosition(self.P, chan)`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return\u001b[0m\n\n"}
{"message":"use of deprecated item 'std::sync::ONCE_INIT': the `new` function is now preferred","code":{"code":"deprecated","explanation":null},"level":"warning","spans":[{"file_name":"/Users/ludwig/.cargo/registry/src/github.com-1ecc6299db9ec823/lazy_static-0.2.11/src/lazy.rs","byte_start":1041,"byte_end":1064,"line_start":37,"line_end":37,"column_start":87,"column_end":110,"is_primary":true,"text":[{"text":"        static mut $NAME: $crate::lazy::Lazy<$T> = $crate::lazy::Lazy(0 as *const $T, $crate::lazy::ONCE_INIT);","highlight_start":87,"highlight_end":110}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/ludwig/.cargo/registry/src/github.com-1ecc6299db9ec823/lazy_static-0.2.11/src/lib.rs","byte_start":4136,"byte_end":4168,"line_start":137,"line_end":137,"column_start":25,"column_end":57,"is_primary":false,"text":[{"text":"                        __lazy_static_create!(LAZY, $T);","highlight_start":25,"highlight_end":57}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/ludwig/.cargo/registry/src/github.com-1ecc6299db9ec823/lazy_static-0.2.11/src/lib.rs","byte_start":3620,"byte_end":3665,"line_start":123,"line_end":123,"column_start":9,"column_end":54,"is_primary":false,"text":[{"text":"        __lazy_static_internal!(@TAIL, $N : $T = $e);","highlight_start":9,"highlight_end":54}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/ludwig/.cargo/registry/src/github.com-1ecc6299db9ec823/lazy_static-0.2.11/src/lib.rs","byte_start":5092,"byte_end":5165,"line_start":167,"line_end":167,"column_start":9,"column_end":82,"is_primary":false,"text":[{"text":"        __lazy_static_internal!($(#[$attr])* () static ref $N : $T = $e; $($t)*);","highlight_start":9,"highlight_end":82}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/ludwig/Dev/UnicornConsole/unicorn/src/chiptune/src/lib.rs","byte_start":2873,"byte_end":9837,"line_start":130,"line_end":218,"column_start":3,"column_end":4,"is_primary":false,"text":[{"text":"  lazy_static! {","highlight_start":3,"highlight_end":17},{"text":"      static ref NOTENAME: [&'static str; 12] = {","highlight_start":1,"highlight_end":50},{"text":"        let m : [&'static str; 12] = [","highlight_start":1,"highlight_end":39},{"text":"          \"C-\",","highlight_start":1,"highlight_end":16},{"text":"          \"C#\",","highlight_start":1,"highlight_end":16},{"text":"          \"D-\",","highlight_start":1,"highlight_end":16},{"text":"          \"D#\",","highlight_start":1,"highlight_end":16},{"text":"          \"E-\",","highlight_start":1,"highlight_end":16},{"text":"          \"F-\",","highlight_start":1,"highlight_end":16},{"text":"          \"F#\",","highlight_start":1,"highlight_end":16},{"text":"          \"G-\",","highlight_start":1,"highlight_end":16},{"text":"          \"G#\",","highlight_start":1,"highlight_end":16},{"text":"          \"A-\",","highlight_start":1,"highlight_end":16},{"text":"          \"A#\",","highlight_start":1,"highlight_end":16},{"text":"          \"B-\"","highlight_start":1,"highlight_end":15},{"text":"        ];","highlight_start":1,"highlight_end":11},{"text":"        m","highlight_start":1,"highlight_end":10},{"text":"      };","highlight_start":1,"highlight_end":9},{"text":"","highlight_start":1,"highlight_end":1},{"text":"      static ref INSTRUCTION_DESC: [ChiptuneInstruction; 63] = {","highlight_start":1,"highlight_end":65},{"text":"          let m : [ChiptuneInstruction; 63] = [","highlight_start":1,"highlight_end":48},{"text":"          ChiptuneInstruction::new(MUS_FX_END, 0xffff, \"Program end\", \"PrgEnd\", 0, 0),","highlight_start":1,"highlight_end":87},{"text":"          ChiptuneInstruction::new(MUS_FX_NOP, 0xffff, \"No operation\", \"Nop\", 0, 0),","highlight_start":1,"highlight_end":85},{"text":"          ChiptuneInstruction::new(MUS_FX_JUMP, 0xff00, \"Goto\", \"Goto\", -1, -1),","highlight_start":1,"highlight_end":81},{"text":"          ChiptuneInstruction::new(MUS_FX_LABEL, 0xff00, \"Loop begin\", \"Begin\", 0, 0),","highlight_start":1,"highlight_end":87},{"text":"          ChiptuneInstruction::new(MUS_FX_LOOP, 0xff00, \"Loop end\", \"Loop\", -1, -1),","highlight_start":1,"highlight_end":85},{"text":"          ChiptuneInstruction::new(MUS_FX_ARPEGGIO, 0x7f00, \"Set arpeggio note\", \"Arp\", -1, -1),","highlight_start":1,"highlight_end":97},{"text":"          ChiptuneInstruction::new(MUS_FX_ARPEGGIO_ABS, 0x7f00, \"Set absolute arpeggio note\", \"AbsArp\", 0, FREQ_TAB_SIZE - 1),","highlight_start":1,"highlight_end":127},{"text":"          ChiptuneInstruction::new(MUS_FX_SET_EXT_ARP, 0x7f00, \"Set external arpeggio notes\", \"ExtArp\", -1, -1),","highlight_start":1,"highlight_end":113},{"text":"          ChiptuneInstruction::new(MUS_FX_PORTA_UP, 0x7f00, \"Portamento up\", \"PortUp\", -1, -1),","highlight_start":1,"highlight_end":96},{"text":"          ChiptuneInstruction::new(MUS_FX_PORTA_DN, 0x7f00, \"Portamento down\", \"PortDn\", -1, -1),","highlight_start":1,"highlight_end":98},{"text":"          ChiptuneInstruction::new(MUS_FX_PORTA_UP_LOG, 0x7f00, \"Portamento up (curve)\", \"PortUpC\", -1, -1),","highlight_start":1,"highlight_end":109},{"text":"          ChiptuneInstruction::new(MUS_FX_PORTA_DN_LOG, 0x7f00, \"Portamento down (curve)\", \"PortDnC\", -1, -1),","highlight_start":1,"highlight_end":111},{"text":"          ChiptuneInstruction::new(MUS_FX_EXT_NOTE_DELAY, 0x7ff0, \"Note delay\", \"Delay\", -1, -1),","highlight_start":1,"highlight_end":98},{"text":"          ChiptuneInstruction::new(MUS_FX_VIBRATO, 0x7f00, \"Vibrato\", \"Vibrato\", -1, -1),","highlight_start":1,"highlight_end":90},{"text":"          ChiptuneInstruction::new(MUS_FX_SLIDE, 0x7f00, \"Slide\", \"Slide\", -1, -1),","highlight_start":1,"highlight_end":84},{"text":"          ChiptuneInstruction::new(MUS_FX_PORTA_UP_SEMI, 0x7f00, \"Portamento up (semitones)\", \"PortUpST\", -1, -1),","highlight_start":1,"highlight_end":115},{"text":"          ChiptuneInstruction::new(MUS_FX_PORTA_DN_SEMI, 0x7f00, \"Portamento down (semitones)\", \"PortDnST\", -1, -1),","highlight_start":1,"highlight_end":117},{"text":"          ChiptuneInstruction::new(MUS_FX_CUTOFF_UP, 0x7f00, \"Filter cutoff up\", \"CutoffUp\", -1, -1),","highlight_start":1,"highlight_end":102},{"text":"          ChiptuneInstruction::new(MUS_FX_CUTOFF_DN, 0x7f00, \"Filter cutoff down\", \"CutoffDn\", -1, -1),","highlight_start":1,"highlight_end":104},{"text":"          ChiptuneInstruction::new(MUS_FX_CUTOFF_SET, 0x7f00, \"Set filter cutoff\", \"Cutoff\", 0, 0xff),","highlight_start":1,"highlight_end":103},{"text":"          ChiptuneInstruction::new(MUS_FX_CUTOFF_SET_COMBINED, 0x7f00, \"Set combined cutoff\", \"CutoffAHX\", 0, 0xff),","highlight_start":1,"highlight_end":117},{"text":"          ChiptuneInstruction::new(MUS_FX_RESONANCE_SET, 0x7f00, \"Set filter resonance\", \"Resonance\", 0, 3),","highlight_start":1,"highlight_end":109},{"text":"          ChiptuneInstruction::new(MUS_FX_FILTER_TYPE, 0x7f00, \"Set filter type\", \"FltType\", 0, 2),","highlight_start":1,"highlight_end":100},{"text":"          ChiptuneInstruction::new(MUS_FX_PW_DN, 0x7f00, \"PW down\", \"PWDn\", -1, -1),","highlight_start":1,"highlight_end":85},{"text":"          ChiptuneInstruction::new(MUS_FX_PW_UP, 0x7f00, \"PW up\", \"PWUp\", -1, -1),","highlight_start":1,"highlight_end":83},{"text":"          ChiptuneInstruction::new(MUS_FX_PW_SET, 0x7f00, \"Set PW\", \"PW\", -1, -1),","highlight_start":1,"highlight_end":83},{"text":"          ChiptuneInstruction::new(MUS_FX_SET_VOLUME, 0x7f00, \"Set volume\", \"Volume\", 0, 0xff),","highlight_start":1,"highlight_end":96},{"text":"          ChiptuneInstruction::new(MUS_FX_FADE_GLOBAL_VOLUME, 0x7f00, \"Global volume fade\", \"GlobFade\", -1, -1),","highlight_start":1,"highlight_end":113},{"text":"          ChiptuneInstruction::new(MUS_FX_SET_GLOBAL_VOLUME, 0x7f00, \"Set global volume\", \"GlobVol\", 0, MAX_VOLUME),","highlight_start":1,"highlight_end":117},{"text":"          ChiptuneInstruction::new(MUS_FX_SET_CHANNEL_VOLUME, 0x7f00, \"Set channel volume\", \"ChnVol\", 0, MAX_VOLUME),","highlight_start":1,"highlight_end":118},{"text":"          ChiptuneInstruction::new(MUS_FX_SET_WAVEFORM, 0x7f00, \"Set waveform\", \"Waveform\", 0, 0xff),","highlight_start":1,"highlight_end":102},{"text":"          ChiptuneInstruction::new(MUS_FX_SET_WAVETABLE_ITEM, 0x7f00, \"Set wavetable item\", \"Wavetable\", 0, CYD_WAVE_MAX_ENTRIES - 1),","highlight_start":1,"highlight_end":135},{"text":"          ChiptuneInstruction::new(MUS_FX_SET_FXBUS, 0x7f00, \"Set FX bus\", \"SetFxBus\", 0, CYD_MAX_FX_CHANNELS - 1),","highlight_start":1,"highlight_end":116},{"text":"          ChiptuneInstruction::new(MUS_FX_SET_RINGSRC, 0x7f00, \"Set ring modulation source (FF=off)\", \"SetRingSrc\", 0, 0xff),","highlight_start":1,"highlight_end":126},{"text":"          ChiptuneInstruction::new(MUS_FX_SET_SYNCSRC, 0x7f00, \"Set sync source (FF=off)\", \"SetSyncSrc\", 0, 0xff),","highlight_start":1,"highlight_end":115},{"text":"          ChiptuneInstruction::new(MUS_FX_SET_DOWNSAMPLE, 0x7f00, \"Set downsample\", \"SetDnSmp\", 0, 0xff),","highlight_start":1,"highlight_end":106},{"text":"          ChiptuneInstruction::new(MUS_FX_SET_SPEED, 0x7f00, \"Set speed\", \"Speed\", -1, -1),","highlight_start":1,"highlight_end":92},{"text":"          ChiptuneInstruction::new(MUS_FX_SET_RATE, 0x7f00, \"Set rate\", \"Rate\", -1, -1),","highlight_start":1,"highlight_end":89},{"text":"          ChiptuneInstruction::new(MUS_FX_LOOP_PATTERN, 0x7f00, \"Loop pattern\", \"PatLoop\", -1, -1),","highlight_start":1,"highlight_end":100},{"text":"          ChiptuneInstruction::new(MUS_FX_SKIP_PATTERN, 0x7f00, \"Skip pattern\", \"PatSkip\", -1, -1),","highlight_start":1,"highlight_end":100},{"text":"          ChiptuneInstruction::new(MUS_FX_TRIGGER_RELEASE, 0x7f00, \"Trigger release\", \"Release\", 0, 0xff),","highlight_start":1,"highlight_end":107},{"text":"          ChiptuneInstruction::new(MUS_FX_RESTART_PROGRAM, 0x7f00, \"Restart program\", \"Restart\", 0, 0),","highlight_start":1,"highlight_end":104},{"text":"          ChiptuneInstruction::new(MUS_FX_FADE_VOLUME, 0x7f00, \"Fade volume\", \"VolFade\", -1, -1),","highlight_start":1,"highlight_end":98},{"text":"          ChiptuneInstruction::new(MUS_FX_EXT_FADE_VOLUME_UP, 0x7ff0, \"Fine fade volume in\", \"VolUpFine\", 0, 0xf),","highlight_start":1,"highlight_end":115},{"text":"          ChiptuneInstruction::new(MUS_FX_EXT_FADE_VOLUME_DN, 0x7ff0, \"Fine fade volume out\", \"VolDnFine\", 0, 0xf),","highlight_start":1,"highlight_end":116},{"text":"          ChiptuneInstruction::new(MUS_FX_EXT_PORTA_UP, 0x7ff0, \"Fine portamento up\", \"PortUpFine\", 0, 0xf),","highlight_start":1,"highlight_end":109},{"text":"          ChiptuneInstruction::new(MUS_FX_EXT_PORTA_DN, 0x7ff0, \"Fine portamento down\", \"PortDnFine\", 0, 0xf),","highlight_start":1,"highlight_end":111},{"text":"          ChiptuneInstruction::new(MUS_FX_EXT_NOTE_CUT, 0x7ff0, \"Note cut\", \"NoteCut\", 0, 0xf),","highlight_start":1,"highlight_end":96},{"text":"          ChiptuneInstruction::new(MUS_FX_EXT_RETRIGGER, 0x7ff0, \"Retrigger\", \"Retrig\", 0, 0xf),","highlight_start":1,"highlight_end":97},{"text":"          ChiptuneInstruction::new(MUS_FX_WAVETABLE_OFFSET, 0x7000, \"Wavetable offset\", \"WaveOffs\", 0, 0xfff),","highlight_start":1,"highlight_end":111},{"text":"          ChiptuneInstruction::new(MUS_FX_SET_PANNING, 0x7f00, \"Set panning\", \"SetPan\", -1, -1),","highlight_start":1,"highlight_end":97},{"text":"          ChiptuneInstruction::new(MUS_FX_PAN_LEFT, 0x7f00, \"Pan left\", \"PanLeft\", -1, -1),","highlight_start":1,"highlight_end":92},{"text":"          ChiptuneInstruction::new(MUS_FX_PAN_RIGHT, 0x7f00, \"Pan right\", \"PanRight\", -1, -1),","highlight_start":1,"highlight_end":95},{"text":"          ChiptuneInstruction::new(MUS_FX_BUZZ_UP, 0x7f00, \"Tune buzz up\", \"BuzzUp\", -1, -1),","highlight_start":1,"highlight_end":94},{"text":"          ChiptuneInstruction::new(MUS_FX_BUZZ_DN, 0x7f00, \"Tune buzz down\", \"BuzzDn\", -1, -1),","highlight_start":1,"highlight_end":96},{"text":"          ChiptuneInstruction::new(MUS_FX_BUZZ_SHAPE, 0x7f00, \"Set buzz shape\", \"BuzzShape\", 0, 3),","highlight_start":1,"highlight_end":100},{"text":"          ChiptuneInstruction::new(MUS_FX_BUZZ_SET, 0x7f00, \"Set buzz finetune\", \"BuzzFine\", -1, -1),","highlight_start":1,"highlight_end":102},{"text":"          ChiptuneInstruction::new(MUS_FX_CUTOFF_FINE_SET, 0x7000, \"Set filter cutoff (fine)\", \"CutFine\", 0, CYD_CUTOFF_MAX - 1),","highlight_start":1,"highlight_end":130},{"text":"          ChiptuneInstruction::new(MUS_FX_BUZZ_SET_SEMI, 0x7f00, \"Set buzz semitone\", \"BuzzSemi\", -1, -1),","highlight_start":1,"highlight_end":107},{"text":"          ChiptuneInstruction::new(MUS_FX_FM_SET_MODULATION, 0x7f00, \"Set FM modulation\", \"FMMod\", 0, 0x7f),","highlight_start":1,"highlight_end":109},{"text":"          ChiptuneInstruction::new(MUS_FX_FM_SET_FEEDBACK, 0x7ff0, \"Set FM feedback\", \"FMFB\", 0, 7),","highlight_start":1,"highlight_end":101},{"text":"          ChiptuneInstruction::new(MUS_FX_FM_SET_HARMONIC, 0x7f00, \"Set FM multiplier\", \"Mult\", 0, 255),","highlight_start":1,"highlight_end":105},{"text":"          ChiptuneInstruction::new(MUS_FX_FM_SET_WAVEFORM, 0x7f00, \"Set FM waveform\", \"FMWave\", 0, 255)","highlight_start":1,"highlight_end":104},{"text":"          ];","highlight_start":1,"highlight_end":13},{"text":"","highlight_start":1,"highlight_end":1},{"text":"          m","highlight_start":1,"highlight_end":12},{"text":"      };","highlight_start":1,"highlight_end":9},{"text":"  }","highlight_start":1,"highlight_end":4}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"lazy_static!","def_site_span":{"file_name":"/Users/ludwig/.cargo/registry/src/github.com-1ecc6299db9ec823/lazy_static-0.2.11/src/lib.rs","byte_start":4901,"byte_end":5560,"line_start":164,"line_end":176,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! lazy_static {","highlight_start":1,"highlight_end":1},{"text":"    ($(#[$attr:meta])* static ref $N:ident : $T:ty = $e:expr; $($t:tt)*) => {","highlight_start":1,"highlight_end":1},{"text":"        // use `()` to explicitly forward the information about private items","highlight_start":1,"highlight_end":1},{"text":"        __lazy_static_internal!($(#[$attr])* () static ref $N : $T = $e; $($t)*);","highlight_start":1,"highlight_end":1},{"text":"    };","highlight_start":1,"highlight_end":1},{"text":"    ($(#[$attr:meta])* pub static ref $N:ident : $T:ty = $e:expr; $($t:tt)*) => {","highlight_start":1,"highlight_end":1},{"text":"        __lazy_static_internal!($(#[$attr])* (pub) static ref $N : $T = $e; $($t)*);","highlight_start":1,"highlight_end":1},{"text":"    };","highlight_start":1,"highlight_end":1},{"text":"    ($(#[$attr:meta])* pub ($($vis:tt)+) static ref $N:ident : $T:ty = $e:expr; $($t:tt)*) => {","highlight_start":1,"highlight_end":1},{"text":"        __lazy_static_internal!($(#[$attr])* (pub ($($vis)+)) static ref $N : $T = $e; $($t)*);","highlight_start":1,"highlight_end":1},{"text":"    };","highlight_start":1,"highlight_end":1},{"text":"    () => ()","highlight_start":1,"highlight_end":1},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"__lazy_static_internal!","def_site_span":{"file_name":"/Users/ludwig/.cargo/registry/src/github.com-1ecc6299db9ec823/lazy_static-0.2.11/src/lib.rs","byte_start":3259,"byte_end":4883,"line_start":118,"line_end":161,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! __lazy_static_internal {","highlight_start":1,"highlight_end":38},{"text":"    // optional visibility restrictions are wrapped in `()` to allow for","highlight_start":1,"highlight_end":73},{"text":"    // explicitly passing otherwise implicit information about private items","highlight_start":1,"highlight_end":77},{"text":"    ($(#[$attr:meta])* ($($vis:tt)*) static ref $N:ident : $T:ty = $e:expr; $($t:tt)*) => {","highlight_start":1,"highlight_end":92},{"text":"        __lazy_static_internal!(@MAKE TY, $(#[$attr])*, ($($vis)*), $N);","highlight_start":1,"highlight_end":73},{"text":"        __lazy_static_internal!(@TAIL, $N : $T = $e);","highlight_start":1,"highlight_end":54},{"text":"        lazy_static!($($t)*);","highlight_start":1,"highlight_end":30},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (@TAIL, $N:ident : $T:ty = $e:expr) => {","highlight_start":1,"highlight_end":45},{"text":"        impl $crate::__Deref for $N {","highlight_start":1,"highlight_end":38},{"text":"            type Target = $T;","highlight_start":1,"highlight_end":30},{"text":"            #[allow(unsafe_code)]","highlight_start":1,"highlight_end":34},{"text":"            fn deref(&self) -> &$T {","highlight_start":1,"highlight_end":37},{"text":"                unsafe {","highlight_start":1,"highlight_end":25},{"text":"                    #[inline(always)]","highlight_start":1,"highlight_end":38},{"text":"                    fn __static_ref_initialize() -> $T { $e }","highlight_start":1,"highlight_end":62},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                    #[inline(always)]","highlight_start":1,"highlight_end":38},{"text":"                    unsafe fn __stability() -> &'static $T {","highlight_start":1,"highlight_end":61},{"text":"                        __lazy_static_create!(LAZY, $T);","highlight_start":1,"highlight_end":57},{"text":"                        LAZY.get(__static_ref_initialize)","highlight_start":1,"highlight_end":58},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    __stability()","highlight_start":1,"highlight_end":34},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"        impl $crate::LazyStatic for $N {","highlight_start":1,"highlight_end":41},{"text":"            fn initialize(lazy: &Self) {","highlight_start":1,"highlight_end":41},{"text":"                let _ = &**lazy;","highlight_start":1,"highlight_end":33},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    // `vis` is wrapped in `()` to prevent parsing ambiguity","highlight_start":1,"highlight_end":61},{"text":"    (@MAKE TY, $(#[$attr:meta])*, ($($vis:tt)*), $N:ident) => {","highlight_start":1,"highlight_end":64},{"text":"        #[allow(missing_copy_implementations)]","highlight_start":1,"highlight_end":47},{"text":"        #[allow(non_camel_case_types)]","highlight_start":1,"highlight_end":39},{"text":"        #[allow(dead_code)]","highlight_start":1,"highlight_end":28},{"text":"        $(#[$attr])*","highlight_start":1,"highlight_end":21},{"text":"        $($vis)* struct $N {__private_field: ()}","highlight_start":1,"highlight_end":49},{"text":"        #[doc(hidden)]","highlight_start":1,"highlight_end":23},{"text":"        $($vis)* static $N: $N = $N {__private_field: ()};","highlight_start":1,"highlight_end":59},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    () => ()","highlight_start":1,"highlight_end":13},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"__lazy_static_internal!","def_site_span":{"file_name":"/Users/ludwig/.cargo/registry/src/github.com-1ecc6299db9ec823/lazy_static-0.2.11/src/lib.rs","byte_start":3259,"byte_end":4883,"line_start":118,"line_end":161,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! __lazy_static_internal {","highlight_start":1,"highlight_end":38},{"text":"    // optional visibility restrictions are wrapped in `()` to allow for","highlight_start":1,"highlight_end":73},{"text":"    // explicitly passing otherwise implicit information about private items","highlight_start":1,"highlight_end":77},{"text":"    ($(#[$attr:meta])* ($($vis:tt)*) static ref $N:ident : $T:ty = $e:expr; $($t:tt)*) => {","highlight_start":1,"highlight_end":92},{"text":"        __lazy_static_internal!(@MAKE TY, $(#[$attr])*, ($($vis)*), $N);","highlight_start":1,"highlight_end":73},{"text":"        __lazy_static_internal!(@TAIL, $N : $T = $e);","highlight_start":1,"highlight_end":54},{"text":"        lazy_static!($($t)*);","highlight_start":1,"highlight_end":30},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (@TAIL, $N:ident : $T:ty = $e:expr) => {","highlight_start":1,"highlight_end":45},{"text":"        impl $crate::__Deref for $N {","highlight_start":1,"highlight_end":38},{"text":"            type Target = $T;","highlight_start":1,"highlight_end":30},{"text":"            #[allow(unsafe_code)]","highlight_start":1,"highlight_end":34},{"text":"            fn deref(&self) -> &$T {","highlight_start":1,"highlight_end":37},{"text":"                unsafe {","highlight_start":1,"highlight_end":25},{"text":"                    #[inline(always)]","highlight_start":1,"highlight_end":38},{"text":"                    fn __static_ref_initialize() -> $T { $e }","highlight_start":1,"highlight_end":62},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                    #[inline(always)]","highlight_start":1,"highlight_end":38},{"text":"                    unsafe fn __stability() -> &'static $T {","highlight_start":1,"highlight_end":61},{"text":"                        __lazy_static_create!(LAZY, $T);","highlight_start":1,"highlight_end":57},{"text":"                        LAZY.get(__static_ref_initialize)","highlight_start":1,"highlight_end":58},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    __stability()","highlight_start":1,"highlight_end":34},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"        impl $crate::LazyStatic for $N {","highlight_start":1,"highlight_end":41},{"text":"            fn initialize(lazy: &Self) {","highlight_start":1,"highlight_end":41},{"text":"                let _ = &**lazy;","highlight_start":1,"highlight_end":33},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    // `vis` is wrapped in `()` to prevent parsing ambiguity","highlight_start":1,"highlight_end":61},{"text":"    (@MAKE TY, $(#[$attr:meta])*, ($($vis:tt)*), $N:ident) => {","highlight_start":1,"highlight_end":64},{"text":"        #[allow(missing_copy_implementations)]","highlight_start":1,"highlight_end":47},{"text":"        #[allow(non_camel_case_types)]","highlight_start":1,"highlight_end":39},{"text":"        #[allow(dead_code)]","highlight_start":1,"highlight_end":28},{"text":"        $(#[$attr])*","highlight_start":1,"highlight_end":21},{"text":"        $($vis)* struct $N {__private_field: ()}","highlight_start":1,"highlight_end":49},{"text":"        #[doc(hidden)]","highlight_start":1,"highlight_end":23},{"text":"        $($vis)* static $N: $N = $N {__private_field: ()};","highlight_start":1,"highlight_end":59},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    () => ()","highlight_start":1,"highlight_end":13},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"__lazy_static_create!","def_site_span":{"file_name":"/Users/ludwig/.cargo/registry/src/github.com-1ecc6299db9ec823/lazy_static-0.2.11/src/lazy.rs","byte_start":889,"byte_end":1074,"line_start":35,"line_end":39,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! __lazy_static_create {","highlight_start":1,"highlight_end":1},{"text":"    ($NAME:ident, $T:ty) => {","highlight_start":1,"highlight_end":1},{"text":"        static mut $NAME: $crate::lazy::Lazy<$T> = $crate::lazy::Lazy(0 as *const $T, $crate::lazy::ONCE_INIT);","highlight_start":1,"highlight_end":1},{"text":"    }","highlight_start":1,"highlight_end":1},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"`#[warn(deprecated)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: use of deprecated item 'std::sync::ONCE_INIT': the `new` function is now preferred\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/ludwig/Dev/UnicornConsole/unicorn/src/chiptune/src/lib.rs:130:3\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m130\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m  lazy_static! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m131\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m      static ref NOTENAME: [&'static str; 12] = {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m132\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let m : [&'static str; 12] = [\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m133\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m          \"C-\",\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m217\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m      };\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m218\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m  }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|___^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(deprecated)]` on by default\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"use of deprecated item 'std::sync::ONCE_INIT': the `new` function is now preferred","code":{"code":"deprecated","explanation":null},"level":"warning","spans":[{"file_name":"/Users/ludwig/.cargo/registry/src/github.com-1ecc6299db9ec823/lazy_static-0.2.11/src/lazy.rs","byte_start":1041,"byte_end":1064,"line_start":37,"line_end":37,"column_start":87,"column_end":110,"is_primary":true,"text":[{"text":"        static mut $NAME: $crate::lazy::Lazy<$T> = $crate::lazy::Lazy(0 as *const $T, $crate::lazy::ONCE_INIT);","highlight_start":87,"highlight_end":110}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/ludwig/.cargo/registry/src/github.com-1ecc6299db9ec823/lazy_static-0.2.11/src/lib.rs","byte_start":4136,"byte_end":4168,"line_start":137,"line_end":137,"column_start":25,"column_end":57,"is_primary":false,"text":[{"text":"                        __lazy_static_create!(LAZY, $T);","highlight_start":25,"highlight_end":57}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/ludwig/.cargo/registry/src/github.com-1ecc6299db9ec823/lazy_static-0.2.11/src/lib.rs","byte_start":3620,"byte_end":3665,"line_start":123,"line_end":123,"column_start":9,"column_end":54,"is_primary":false,"text":[{"text":"        __lazy_static_internal!(@TAIL, $N : $T = $e);","highlight_start":9,"highlight_end":54}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/ludwig/.cargo/registry/src/github.com-1ecc6299db9ec823/lazy_static-0.2.11/src/lib.rs","byte_start":5092,"byte_end":5165,"line_start":167,"line_end":167,"column_start":9,"column_end":82,"is_primary":false,"text":[{"text":"        __lazy_static_internal!($(#[$attr])* () static ref $N : $T = $e; $($t)*);","highlight_start":9,"highlight_end":82}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/ludwig/.cargo/registry/src/github.com-1ecc6299db9ec823/lazy_static-0.2.11/src/lib.rs","byte_start":3674,"byte_end":3695,"line_start":124,"line_end":124,"column_start":9,"column_end":30,"is_primary":false,"text":[{"text":"        lazy_static!($($t)*);","highlight_start":9,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/ludwig/Dev/UnicornConsole/unicorn/src/chiptune/src/lib.rs","byte_start":2873,"byte_end":9837,"line_start":130,"line_end":218,"column_start":3,"column_end":4,"is_primary":false,"text":[{"text":"  lazy_static! {","highlight_start":3,"highlight_end":17},{"text":"      static ref NOTENAME: [&'static str; 12] = {","highlight_start":1,"highlight_end":50},{"text":"        let m : [&'static str; 12] = [","highlight_start":1,"highlight_end":39},{"text":"          \"C-\",","highlight_start":1,"highlight_end":16},{"text":"          \"C#\",","highlight_start":1,"highlight_end":16},{"text":"          \"D-\",","highlight_start":1,"highlight_end":16},{"text":"          \"D#\",","highlight_start":1,"highlight_end":16},{"text":"          \"E-\",","highlight_start":1,"highlight_end":16},{"text":"          \"F-\",","highlight_start":1,"highlight_end":16},{"text":"          \"F#\",","highlight_start":1,"highlight_end":16},{"text":"          \"G-\",","highlight_start":1,"highlight_end":16},{"text":"          \"G#\",","highlight_start":1,"highlight_end":16},{"text":"          \"A-\",","highlight_start":1,"highlight_end":16},{"text":"          \"A#\",","highlight_start":1,"highlight_end":16},{"text":"          \"B-\"","highlight_start":1,"highlight_end":15},{"text":"        ];","highlight_start":1,"highlight_end":11},{"text":"        m","highlight_start":1,"highlight_end":10},{"text":"      };","highlight_start":1,"highlight_end":9},{"text":"","highlight_start":1,"highlight_end":1},{"text":"      static ref INSTRUCTION_DESC: [ChiptuneInstruction; 63] = {","highlight_start":1,"highlight_end":65},{"text":"          let m : [ChiptuneInstruction; 63] = [","highlight_start":1,"highlight_end":48},{"text":"          ChiptuneInstruction::new(MUS_FX_END, 0xffff, \"Program end\", \"PrgEnd\", 0, 0),","highlight_start":1,"highlight_end":87},{"text":"          ChiptuneInstruction::new(MUS_FX_NOP, 0xffff, \"No operation\", \"Nop\", 0, 0),","highlight_start":1,"highlight_end":85},{"text":"          ChiptuneInstruction::new(MUS_FX_JUMP, 0xff00, \"Goto\", \"Goto\", -1, -1),","highlight_start":1,"highlight_end":81},{"text":"          ChiptuneInstruction::new(MUS_FX_LABEL, 0xff00, \"Loop begin\", \"Begin\", 0, 0),","highlight_start":1,"highlight_end":87},{"text":"          ChiptuneInstruction::new(MUS_FX_LOOP, 0xff00, \"Loop end\", \"Loop\", -1, -1),","highlight_start":1,"highlight_end":85},{"text":"          ChiptuneInstruction::new(MUS_FX_ARPEGGIO, 0x7f00, \"Set arpeggio note\", \"Arp\", -1, -1),","highlight_start":1,"highlight_end":97},{"text":"          ChiptuneInstruction::new(MUS_FX_ARPEGGIO_ABS, 0x7f00, \"Set absolute arpeggio note\", \"AbsArp\", 0, FREQ_TAB_SIZE - 1),","highlight_start":1,"highlight_end":127},{"text":"          ChiptuneInstruction::new(MUS_FX_SET_EXT_ARP, 0x7f00, \"Set external arpeggio notes\", \"ExtArp\", -1, -1),","highlight_start":1,"highlight_end":113},{"text":"          ChiptuneInstruction::new(MUS_FX_PORTA_UP, 0x7f00, \"Portamento up\", \"PortUp\", -1, -1),","highlight_start":1,"highlight_end":96},{"text":"          ChiptuneInstruction::new(MUS_FX_PORTA_DN, 0x7f00, \"Portamento down\", \"PortDn\", -1, -1),","highlight_start":1,"highlight_end":98},{"text":"          ChiptuneInstruction::new(MUS_FX_PORTA_UP_LOG, 0x7f00, \"Portamento up (curve)\", \"PortUpC\", -1, -1),","highlight_start":1,"highlight_end":109},{"text":"          ChiptuneInstruction::new(MUS_FX_PORTA_DN_LOG, 0x7f00, \"Portamento down (curve)\", \"PortDnC\", -1, -1),","highlight_start":1,"highlight_end":111},{"text":"          ChiptuneInstruction::new(MUS_FX_EXT_NOTE_DELAY, 0x7ff0, \"Note delay\", \"Delay\", -1, -1),","highlight_start":1,"highlight_end":98},{"text":"          ChiptuneInstruction::new(MUS_FX_VIBRATO, 0x7f00, \"Vibrato\", \"Vibrato\", -1, -1),","highlight_start":1,"highlight_end":90},{"text":"          ChiptuneInstruction::new(MUS_FX_SLIDE, 0x7f00, \"Slide\", \"Slide\", -1, -1),","highlight_start":1,"highlight_end":84},{"text":"          ChiptuneInstruction::new(MUS_FX_PORTA_UP_SEMI, 0x7f00, \"Portamento up (semitones)\", \"PortUpST\", -1, -1),","highlight_start":1,"highlight_end":115},{"text":"          ChiptuneInstruction::new(MUS_FX_PORTA_DN_SEMI, 0x7f00, \"Portamento down (semitones)\", \"PortDnST\", -1, -1),","highlight_start":1,"highlight_end":117},{"text":"          ChiptuneInstruction::new(MUS_FX_CUTOFF_UP, 0x7f00, \"Filter cutoff up\", \"CutoffUp\", -1, -1),","highlight_start":1,"highlight_end":102},{"text":"          ChiptuneInstruction::new(MUS_FX_CUTOFF_DN, 0x7f00, \"Filter cutoff down\", \"CutoffDn\", -1, -1),","highlight_start":1,"highlight_end":104},{"text":"          ChiptuneInstruction::new(MUS_FX_CUTOFF_SET, 0x7f00, \"Set filter cutoff\", \"Cutoff\", 0, 0xff),","highlight_start":1,"highlight_end":103},{"text":"          ChiptuneInstruction::new(MUS_FX_CUTOFF_SET_COMBINED, 0x7f00, \"Set combined cutoff\", \"CutoffAHX\", 0, 0xff),","highlight_start":1,"highlight_end":117},{"text":"          ChiptuneInstruction::new(MUS_FX_RESONANCE_SET, 0x7f00, \"Set filter resonance\", \"Resonance\", 0, 3),","highlight_start":1,"highlight_end":109},{"text":"          ChiptuneInstruction::new(MUS_FX_FILTER_TYPE, 0x7f00, \"Set filter type\", \"FltType\", 0, 2),","highlight_start":1,"highlight_end":100},{"text":"          ChiptuneInstruction::new(MUS_FX_PW_DN, 0x7f00, \"PW down\", \"PWDn\", -1, -1),","highlight_start":1,"highlight_end":85},{"text":"          ChiptuneInstruction::new(MUS_FX_PW_UP, 0x7f00, \"PW up\", \"PWUp\", -1, -1),","highlight_start":1,"highlight_end":83},{"text":"          ChiptuneInstruction::new(MUS_FX_PW_SET, 0x7f00, \"Set PW\", \"PW\", -1, -1),","highlight_start":1,"highlight_end":83},{"text":"          ChiptuneInstruction::new(MUS_FX_SET_VOLUME, 0x7f00, \"Set volume\", \"Volume\", 0, 0xff),","highlight_start":1,"highlight_end":96},{"text":"          ChiptuneInstruction::new(MUS_FX_FADE_GLOBAL_VOLUME, 0x7f00, \"Global volume fade\", \"GlobFade\", -1, -1),","highlight_start":1,"highlight_end":113},{"text":"          ChiptuneInstruction::new(MUS_FX_SET_GLOBAL_VOLUME, 0x7f00, \"Set global volume\", \"GlobVol\", 0, MAX_VOLUME),","highlight_start":1,"highlight_end":117},{"text":"          ChiptuneInstruction::new(MUS_FX_SET_CHANNEL_VOLUME, 0x7f00, \"Set channel volume\", \"ChnVol\", 0, MAX_VOLUME),","highlight_start":1,"highlight_end":118},{"text":"          ChiptuneInstruction::new(MUS_FX_SET_WAVEFORM, 0x7f00, \"Set waveform\", \"Waveform\", 0, 0xff),","highlight_start":1,"highlight_end":102},{"text":"          ChiptuneInstruction::new(MUS_FX_SET_WAVETABLE_ITEM, 0x7f00, \"Set wavetable item\", \"Wavetable\", 0, CYD_WAVE_MAX_ENTRIES - 1),","highlight_start":1,"highlight_end":135},{"text":"          ChiptuneInstruction::new(MUS_FX_SET_FXBUS, 0x7f00, \"Set FX bus\", \"SetFxBus\", 0, CYD_MAX_FX_CHANNELS - 1),","highlight_start":1,"highlight_end":116},{"text":"          ChiptuneInstruction::new(MUS_FX_SET_RINGSRC, 0x7f00, \"Set ring modulation source (FF=off)\", \"SetRingSrc\", 0, 0xff),","highlight_start":1,"highlight_end":126},{"text":"          ChiptuneInstruction::new(MUS_FX_SET_SYNCSRC, 0x7f00, \"Set sync source (FF=off)\", \"SetSyncSrc\", 0, 0xff),","highlight_start":1,"highlight_end":115},{"text":"          ChiptuneInstruction::new(MUS_FX_SET_DOWNSAMPLE, 0x7f00, \"Set downsample\", \"SetDnSmp\", 0, 0xff),","highlight_start":1,"highlight_end":106},{"text":"          ChiptuneInstruction::new(MUS_FX_SET_SPEED, 0x7f00, \"Set speed\", \"Speed\", -1, -1),","highlight_start":1,"highlight_end":92},{"text":"          ChiptuneInstruction::new(MUS_FX_SET_RATE, 0x7f00, \"Set rate\", \"Rate\", -1, -1),","highlight_start":1,"highlight_end":89},{"text":"          ChiptuneInstruction::new(MUS_FX_LOOP_PATTERN, 0x7f00, \"Loop pattern\", \"PatLoop\", -1, -1),","highlight_start":1,"highlight_end":100},{"text":"          ChiptuneInstruction::new(MUS_FX_SKIP_PATTERN, 0x7f00, \"Skip pattern\", \"PatSkip\", -1, -1),","highlight_start":1,"highlight_end":100},{"text":"          ChiptuneInstruction::new(MUS_FX_TRIGGER_RELEASE, 0x7f00, \"Trigger release\", \"Release\", 0, 0xff),","highlight_start":1,"highlight_end":107},{"text":"          ChiptuneInstruction::new(MUS_FX_RESTART_PROGRAM, 0x7f00, \"Restart program\", \"Restart\", 0, 0),","highlight_start":1,"highlight_end":104},{"text":"          ChiptuneInstruction::new(MUS_FX_FADE_VOLUME, 0x7f00, \"Fade volume\", \"VolFade\", -1, -1),","highlight_start":1,"highlight_end":98},{"text":"          ChiptuneInstruction::new(MUS_FX_EXT_FADE_VOLUME_UP, 0x7ff0, \"Fine fade volume in\", \"VolUpFine\", 0, 0xf),","highlight_start":1,"highlight_end":115},{"text":"          ChiptuneInstruction::new(MUS_FX_EXT_FADE_VOLUME_DN, 0x7ff0, \"Fine fade volume out\", \"VolDnFine\", 0, 0xf),","highlight_start":1,"highlight_end":116},{"text":"          ChiptuneInstruction::new(MUS_FX_EXT_PORTA_UP, 0x7ff0, \"Fine portamento up\", \"PortUpFine\", 0, 0xf),","highlight_start":1,"highlight_end":109},{"text":"          ChiptuneInstruction::new(MUS_FX_EXT_PORTA_DN, 0x7ff0, \"Fine portamento down\", \"PortDnFine\", 0, 0xf),","highlight_start":1,"highlight_end":111},{"text":"          ChiptuneInstruction::new(MUS_FX_EXT_NOTE_CUT, 0x7ff0, \"Note cut\", \"NoteCut\", 0, 0xf),","highlight_start":1,"highlight_end":96},{"text":"          ChiptuneInstruction::new(MUS_FX_EXT_RETRIGGER, 0x7ff0, \"Retrigger\", \"Retrig\", 0, 0xf),","highlight_start":1,"highlight_end":97},{"text":"          ChiptuneInstruction::new(MUS_FX_WAVETABLE_OFFSET, 0x7000, \"Wavetable offset\", \"WaveOffs\", 0, 0xfff),","highlight_start":1,"highlight_end":111},{"text":"          ChiptuneInstruction::new(MUS_FX_SET_PANNING, 0x7f00, \"Set panning\", \"SetPan\", -1, -1),","highlight_start":1,"highlight_end":97},{"text":"          ChiptuneInstruction::new(MUS_FX_PAN_LEFT, 0x7f00, \"Pan left\", \"PanLeft\", -1, -1),","highlight_start":1,"highlight_end":92},{"text":"          ChiptuneInstruction::new(MUS_FX_PAN_RIGHT, 0x7f00, \"Pan right\", \"PanRight\", -1, -1),","highlight_start":1,"highlight_end":95},{"text":"          ChiptuneInstruction::new(MUS_FX_BUZZ_UP, 0x7f00, \"Tune buzz up\", \"BuzzUp\", -1, -1),","highlight_start":1,"highlight_end":94},{"text":"          ChiptuneInstruction::new(MUS_FX_BUZZ_DN, 0x7f00, \"Tune buzz down\", \"BuzzDn\", -1, -1),","highlight_start":1,"highlight_end":96},{"text":"          ChiptuneInstruction::new(MUS_FX_BUZZ_SHAPE, 0x7f00, \"Set buzz shape\", \"BuzzShape\", 0, 3),","highlight_start":1,"highlight_end":100},{"text":"          ChiptuneInstruction::new(MUS_FX_BUZZ_SET, 0x7f00, \"Set buzz finetune\", \"BuzzFine\", -1, -1),","highlight_start":1,"highlight_end":102},{"text":"          ChiptuneInstruction::new(MUS_FX_CUTOFF_FINE_SET, 0x7000, \"Set filter cutoff (fine)\", \"CutFine\", 0, CYD_CUTOFF_MAX - 1),","highlight_start":1,"highlight_end":130},{"text":"          ChiptuneInstruction::new(MUS_FX_BUZZ_SET_SEMI, 0x7f00, \"Set buzz semitone\", \"BuzzSemi\", -1, -1),","highlight_start":1,"highlight_end":107},{"text":"          ChiptuneInstruction::new(MUS_FX_FM_SET_MODULATION, 0x7f00, \"Set FM modulation\", \"FMMod\", 0, 0x7f),","highlight_start":1,"highlight_end":109},{"text":"          ChiptuneInstruction::new(MUS_FX_FM_SET_FEEDBACK, 0x7ff0, \"Set FM feedback\", \"FMFB\", 0, 7),","highlight_start":1,"highlight_end":101},{"text":"          ChiptuneInstruction::new(MUS_FX_FM_SET_HARMONIC, 0x7f00, \"Set FM multiplier\", \"Mult\", 0, 255),","highlight_start":1,"highlight_end":105},{"text":"          ChiptuneInstruction::new(MUS_FX_FM_SET_WAVEFORM, 0x7f00, \"Set FM waveform\", \"FMWave\", 0, 255)","highlight_start":1,"highlight_end":104},{"text":"          ];","highlight_start":1,"highlight_end":13},{"text":"","highlight_start":1,"highlight_end":1},{"text":"          m","highlight_start":1,"highlight_end":12},{"text":"      };","highlight_start":1,"highlight_end":9},{"text":"  }","highlight_start":1,"highlight_end":4}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"lazy_static!","def_site_span":{"file_name":"/Users/ludwig/.cargo/registry/src/github.com-1ecc6299db9ec823/lazy_static-0.2.11/src/lib.rs","byte_start":4901,"byte_end":5560,"line_start":164,"line_end":176,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! lazy_static {","highlight_start":1,"highlight_end":27},{"text":"    ($(#[$attr:meta])* static ref $N:ident : $T:ty = $e:expr; $($t:tt)*) => {","highlight_start":1,"highlight_end":78},{"text":"        // use `()` to explicitly forward the information about private items","highlight_start":1,"highlight_end":78},{"text":"        __lazy_static_internal!($(#[$attr])* () static ref $N : $T = $e; $($t)*);","highlight_start":1,"highlight_end":82},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($(#[$attr:meta])* pub static ref $N:ident : $T:ty = $e:expr; $($t:tt)*) => {","highlight_start":1,"highlight_end":82},{"text":"        __lazy_static_internal!($(#[$attr])* (pub) static ref $N : $T = $e; $($t)*);","highlight_start":1,"highlight_end":85},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($(#[$attr:meta])* pub ($($vis:tt)+) static ref $N:ident : $T:ty = $e:expr; $($t:tt)*) => {","highlight_start":1,"highlight_end":96},{"text":"        __lazy_static_internal!($(#[$attr])* (pub ($($vis)+)) static ref $N : $T = $e; $($t)*);","highlight_start":1,"highlight_end":96},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    () => ()","highlight_start":1,"highlight_end":13},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"lazy_static!","def_site_span":{"file_name":"/Users/ludwig/.cargo/registry/src/github.com-1ecc6299db9ec823/lazy_static-0.2.11/src/lib.rs","byte_start":4901,"byte_end":5560,"line_start":164,"line_end":176,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! lazy_static {","highlight_start":1,"highlight_end":27},{"text":"    ($(#[$attr:meta])* static ref $N:ident : $T:ty = $e:expr; $($t:tt)*) => {","highlight_start":1,"highlight_end":78},{"text":"        // use `()` to explicitly forward the information about private items","highlight_start":1,"highlight_end":78},{"text":"        __lazy_static_internal!($(#[$attr])* () static ref $N : $T = $e; $($t)*);","highlight_start":1,"highlight_end":82},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($(#[$attr:meta])* pub static ref $N:ident : $T:ty = $e:expr; $($t:tt)*) => {","highlight_start":1,"highlight_end":82},{"text":"        __lazy_static_internal!($(#[$attr])* (pub) static ref $N : $T = $e; $($t)*);","highlight_start":1,"highlight_end":85},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($(#[$attr:meta])* pub ($($vis:tt)+) static ref $N:ident : $T:ty = $e:expr; $($t:tt)*) => {","highlight_start":1,"highlight_end":96},{"text":"        __lazy_static_internal!($(#[$attr])* (pub ($($vis)+)) static ref $N : $T = $e; $($t)*);","highlight_start":1,"highlight_end":96},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    () => ()","highlight_start":1,"highlight_end":13},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"__lazy_static_internal!","def_site_span":{"file_name":"/Users/ludwig/.cargo/registry/src/github.com-1ecc6299db9ec823/lazy_static-0.2.11/src/lib.rs","byte_start":3259,"byte_end":4883,"line_start":118,"line_end":161,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! __lazy_static_internal {","highlight_start":1,"highlight_end":38},{"text":"    // optional visibility restrictions are wrapped in `()` to allow for","highlight_start":1,"highlight_end":73},{"text":"    // explicitly passing otherwise implicit information about private items","highlight_start":1,"highlight_end":77},{"text":"    ($(#[$attr:meta])* ($($vis:tt)*) static ref $N:ident : $T:ty = $e:expr; $($t:tt)*) => {","highlight_start":1,"highlight_end":92},{"text":"        __lazy_static_internal!(@MAKE TY, $(#[$attr])*, ($($vis)*), $N);","highlight_start":1,"highlight_end":73},{"text":"        __lazy_static_internal!(@TAIL, $N : $T = $e);","highlight_start":1,"highlight_end":54},{"text":"        lazy_static!($($t)*);","highlight_start":1,"highlight_end":30},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (@TAIL, $N:ident : $T:ty = $e:expr) => {","highlight_start":1,"highlight_end":45},{"text":"        impl $crate::__Deref for $N {","highlight_start":1,"highlight_end":38},{"text":"            type Target = $T;","highlight_start":1,"highlight_end":30},{"text":"            #[allow(unsafe_code)]","highlight_start":1,"highlight_end":34},{"text":"            fn deref(&self) -> &$T {","highlight_start":1,"highlight_end":37},{"text":"                unsafe {","highlight_start":1,"highlight_end":25},{"text":"                    #[inline(always)]","highlight_start":1,"highlight_end":38},{"text":"                    fn __static_ref_initialize() -> $T { $e }","highlight_start":1,"highlight_end":62},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                    #[inline(always)]","highlight_start":1,"highlight_end":38},{"text":"                    unsafe fn __stability() -> &'static $T {","highlight_start":1,"highlight_end":61},{"text":"                        __lazy_static_create!(LAZY, $T);","highlight_start":1,"highlight_end":57},{"text":"                        LAZY.get(__static_ref_initialize)","highlight_start":1,"highlight_end":58},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    __stability()","highlight_start":1,"highlight_end":34},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"        impl $crate::LazyStatic for $N {","highlight_start":1,"highlight_end":41},{"text":"            fn initialize(lazy: &Self) {","highlight_start":1,"highlight_end":41},{"text":"                let _ = &**lazy;","highlight_start":1,"highlight_end":33},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    // `vis` is wrapped in `()` to prevent parsing ambiguity","highlight_start":1,"highlight_end":61},{"text":"    (@MAKE TY, $(#[$attr:meta])*, ($($vis:tt)*), $N:ident) => {","highlight_start":1,"highlight_end":64},{"text":"        #[allow(missing_copy_implementations)]","highlight_start":1,"highlight_end":47},{"text":"        #[allow(non_camel_case_types)]","highlight_start":1,"highlight_end":39},{"text":"        #[allow(dead_code)]","highlight_start":1,"highlight_end":28},{"text":"        $(#[$attr])*","highlight_start":1,"highlight_end":21},{"text":"        $($vis)* struct $N {__private_field: ()}","highlight_start":1,"highlight_end":49},{"text":"        #[doc(hidden)]","highlight_start":1,"highlight_end":23},{"text":"        $($vis)* static $N: $N = $N {__private_field: ()};","highlight_start":1,"highlight_end":59},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    () => ()","highlight_start":1,"highlight_end":13},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"__lazy_static_internal!","def_site_span":{"file_name":"/Users/ludwig/.cargo/registry/src/github.com-1ecc6299db9ec823/lazy_static-0.2.11/src/lib.rs","byte_start":3259,"byte_end":4883,"line_start":118,"line_end":161,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! __lazy_static_internal {","highlight_start":1,"highlight_end":38},{"text":"    // optional visibility restrictions are wrapped in `()` to allow for","highlight_start":1,"highlight_end":73},{"text":"    // explicitly passing otherwise implicit information about private items","highlight_start":1,"highlight_end":77},{"text":"    ($(#[$attr:meta])* ($($vis:tt)*) static ref $N:ident : $T:ty = $e:expr; $($t:tt)*) => {","highlight_start":1,"highlight_end":92},{"text":"        __lazy_static_internal!(@MAKE TY, $(#[$attr])*, ($($vis)*), $N);","highlight_start":1,"highlight_end":73},{"text":"        __lazy_static_internal!(@TAIL, $N : $T = $e);","highlight_start":1,"highlight_end":54},{"text":"        lazy_static!($($t)*);","highlight_start":1,"highlight_end":30},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (@TAIL, $N:ident : $T:ty = $e:expr) => {","highlight_start":1,"highlight_end":45},{"text":"        impl $crate::__Deref for $N {","highlight_start":1,"highlight_end":38},{"text":"            type Target = $T;","highlight_start":1,"highlight_end":30},{"text":"            #[allow(unsafe_code)]","highlight_start":1,"highlight_end":34},{"text":"            fn deref(&self) -> &$T {","highlight_start":1,"highlight_end":37},{"text":"                unsafe {","highlight_start":1,"highlight_end":25},{"text":"                    #[inline(always)]","highlight_start":1,"highlight_end":38},{"text":"                    fn __static_ref_initialize() -> $T { $e }","highlight_start":1,"highlight_end":62},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                    #[inline(always)]","highlight_start":1,"highlight_end":38},{"text":"                    unsafe fn __stability() -> &'static $T {","highlight_start":1,"highlight_end":61},{"text":"                        __lazy_static_create!(LAZY, $T);","highlight_start":1,"highlight_end":57},{"text":"                        LAZY.get(__static_ref_initialize)","highlight_start":1,"highlight_end":58},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    __stability()","highlight_start":1,"highlight_end":34},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"        impl $crate::LazyStatic for $N {","highlight_start":1,"highlight_end":41},{"text":"            fn initialize(lazy: &Self) {","highlight_start":1,"highlight_end":41},{"text":"                let _ = &**lazy;","highlight_start":1,"highlight_end":33},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    // `vis` is wrapped in `()` to prevent parsing ambiguity","highlight_start":1,"highlight_end":61},{"text":"    (@MAKE TY, $(#[$attr:meta])*, ($($vis:tt)*), $N:ident) => {","highlight_start":1,"highlight_end":64},{"text":"        #[allow(missing_copy_implementations)]","highlight_start":1,"highlight_end":47},{"text":"        #[allow(non_camel_case_types)]","highlight_start":1,"highlight_end":39},{"text":"        #[allow(dead_code)]","highlight_start":1,"highlight_end":28},{"text":"        $(#[$attr])*","highlight_start":1,"highlight_end":21},{"text":"        $($vis)* struct $N {__private_field: ()}","highlight_start":1,"highlight_end":49},{"text":"        #[doc(hidden)]","highlight_start":1,"highlight_end":23},{"text":"        $($vis)* static $N: $N = $N {__private_field: ()};","highlight_start":1,"highlight_end":59},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    () => ()","highlight_start":1,"highlight_end":13},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"__lazy_static_create!","def_site_span":{"file_name":"/Users/ludwig/.cargo/registry/src/github.com-1ecc6299db9ec823/lazy_static-0.2.11/src/lazy.rs","byte_start":889,"byte_end":1074,"line_start":35,"line_end":39,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! __lazy_static_create {","highlight_start":1,"highlight_end":36},{"text":"    ($NAME:ident, $T:ty) => {","highlight_start":1,"highlight_end":30},{"text":"        static mut $NAME: $crate::lazy::Lazy<$T> = $crate::lazy::Lazy(0 as *const $T, $crate::lazy::ONCE_INIT);","highlight_start":1,"highlight_end":112},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: use of deprecated item 'std::sync::ONCE_INIT': the `new` function is now preferred\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/ludwig/Dev/UnicornConsole/unicorn/src/chiptune/src/lib.rs:130:3\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m130\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m  lazy_static! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m131\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m      static ref NOTENAME: [&'static str; 12] = {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m132\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let m : [&'static str; 12] = [\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m133\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m          \"C-\",\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m217\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m      };\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m218\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m  }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|___^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"redundant clone","code":{"code":"clippy::redundant_clone","explanation":null},"level":"warning","spans":[{"file_name":"/Users/ludwig/Dev/UnicornConsole/unicorn/src/chiptune/src/lib.rs","byte_start":10737,"byte_end":10745,"line_start":240,"line_end":240,"column_start":32,"column_end":40,"is_primary":true,"text":[{"text":"          return Ok(v.shortname.clone());","highlight_start":32,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(clippy::redundant_clone)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"this value is dropped without further use","code":null,"level":"note","spans":[{"file_name":"/Users/ludwig/Dev/UnicornConsole/unicorn/src/chiptune/src/lib.rs","byte_start":10726,"byte_end":10737,"line_start":240,"line_end":240,"column_start":21,"column_end":32,"is_primary":true,"text":[{"text":"          return Ok(v.shortname.clone());","highlight_start":21,"highlight_end":32}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#redundant_clone","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"remove this","code":null,"level":"help","spans":[{"file_name":"/Users/ludwig/Dev/UnicornConsole/unicorn/src/chiptune/src/lib.rs","byte_start":10737,"byte_end":10745,"line_start":240,"line_end":240,"column_start":32,"column_end":40,"is_primary":true,"text":[{"text":"          return Ok(v.shortname.clone());","highlight_start":32,"highlight_end":40}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: redundant clone\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/ludwig/Dev/UnicornConsole/unicorn/src/chiptune/src/lib.rs:240:32\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m240\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m          return Ok(v.shortname.clone());\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                               \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: remove this\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(clippy::redundant_clone)]` on by default\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: this value is dropped without further use\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/ludwig/Dev/UnicornConsole/unicorn/src/chiptune/src/lib.rs:240:21\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m240\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m          return Ok(v.shortname.clone());\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#redundant_clone\u001b[0m\n\n"}
{"message":"`if _ { .. } else { .. }` is an expression","code":{"code":"clippy::useless_let_if_seq","explanation":null},"level":"warning","spans":[{"file_name":"/Users/ludwig/Dev/UnicornConsole/unicorn/src/chiptune/src/lib.rs","byte_start":10372,"byte_end":10520,"line_start":230,"line_end":233,"column_start":15,"column_end":16,"is_primary":true,"text":[{"text":"              let mut note = 0;","highlight_start":15,"highlight_end":32},{"text":"              if (opcode & 0x7f00) == MUS_FX_ARPEGGIO {","highlight_start":1,"highlight_end":56},{"text":"                note = base_note as i32 + (opcode & 0xff);","highlight_start":1,"highlight_end":59},{"text":"              }","highlight_start":1,"highlight_end":16}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(clippy::useless_let_if_seq)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"you might not need `mut` at all","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#useless_let_if_seq","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"it is more idiomatic to write","code":null,"level":"help","spans":[{"file_name":"/Users/ludwig/Dev/UnicornConsole/unicorn/src/chiptune/src/lib.rs","byte_start":10372,"byte_end":10520,"line_start":230,"line_end":233,"column_start":15,"column_end":16,"is_primary":true,"text":[{"text":"              let mut note = 0;","highlight_start":15,"highlight_end":32},{"text":"              if (opcode & 0x7f00) == MUS_FX_ARPEGGIO {","highlight_start":1,"highlight_end":56},{"text":"                note = base_note as i32 + (opcode & 0xff);","highlight_start":1,"highlight_end":59},{"text":"              }","highlight_start":1,"highlight_end":16}],"label":null,"suggested_replacement":"let <mut> note = if (opcode & 0x7f00) == MUS_FX_ARPEGGIO { base_note as i32 + (opcode & 0xff) } else { 0 };","suggestion_applicability":"HasPlaceholders","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `if _ { .. } else { .. }` is an expression\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/ludwig/Dev/UnicornConsole/unicorn/src/chiptune/src/lib.rs:230:15\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m230\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m              let mut note = 0;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m231\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m              if (opcode & 0x7f00) == MUS_FX_ARPEGGIO {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m232\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                note = base_note as i32 + (opcode & 0xff);\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m233\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m              }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_______________^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: it is more idiomatic to write: `let <mut> note = if (opcode & 0x7f00) == MUS_FX_ARPEGGIO { base_note as i32 + (opcode & 0xff) } else { 0 };`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(clippy::useless_let_if_seq)]` on by default\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: you might not need `mut` at all\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#useless_let_if_seq\u001b[0m\n\n"}
{"message":"useless use of `format!`","code":{"code":"clippy::useless_format","explanation":null},"level":"warning","spans":[{"file_name":"/Users/ludwig/Dev/UnicornConsole/unicorn/src/chiptune/src/lib.rs","byte_start":10545,"byte_end":10595,"line_start":234,"line_end":234,"column_start":25,"column_end":75,"is_primary":true,"text":[{"text":"              return Ok(format!(\"{}\", base_note_name(note as u8).unwrap()));","highlight_start":25,"highlight_end":75}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(clippy::useless_format)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#useless_format","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"consider using `.to_string()`","code":null,"level":"help","spans":[{"file_name":"/Users/ludwig/Dev/UnicornConsole/unicorn/src/chiptune/src/lib.rs","byte_start":10545,"byte_end":10595,"line_start":234,"line_end":234,"column_start":25,"column_end":75,"is_primary":true,"text":[{"text":"              return Ok(format!(\"{}\", base_note_name(note as u8).unwrap()));","highlight_start":25,"highlight_end":75}],"label":null,"suggested_replacement":"base_note_name(note as u8).unwrap().to_string()","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: useless use of `format!`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/ludwig/Dev/UnicornConsole/unicorn/src/chiptune/src/lib.rs:234:25\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m234\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m              return Ok(format!(\"{}\", base_note_name(note as u8).unwrap()));\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: consider using `.to_string()`: `base_note_name(note as u8).unwrap().to_string()`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(clippy::useless_format)]` on by default\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#useless_format\u001b[0m\n\n"}
{"message":"you should consider adding a `Default` implementation for `chiptune::Chiptune`","code":{"code":"clippy::new_without_default","explanation":null},"level":"warning","spans":[{"file_name":"/Users/ludwig/Dev/UnicornConsole/unicorn/src/chiptune/src/lib.rs","byte_start":11170,"byte_end":11283,"line_start":258,"line_end":262,"column_start":5,"column_end":6,"is_primary":true,"text":[{"text":"    pub fn new() -> Chiptune {","highlight_start":5,"highlight_end":31},{"text":"      unsafe {","highlight_start":1,"highlight_end":15},{"text":"        Chiptune { P: ffi::Chiptune_CreatePlayer(44100) }","highlight_start":1,"highlight_end":58},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(clippy::new_without_default)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#new_without_default","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"try this","code":null,"level":"help","spans":[{"file_name":"/Users/ludwig/Dev/UnicornConsole/unicorn/src/chiptune/src/lib.rs","byte_start":11150,"byte_end":11150,"line_start":257,"line_end":257,"column_start":3,"column_end":3,"is_primary":true,"text":[{"text":"  impl Chiptune {","highlight_start":3,"highlight_end":3}],"label":null,"suggested_replacement":"impl Default for chiptune::Chiptune {\n      fn default() -> Self {\n          Self::new()\n      }\n  }\n\n  ","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: you should consider adding a `Default` implementation for `chiptune::Chiptune`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/ludwig/Dev/UnicornConsole/unicorn/src/chiptune/src/lib.rs:258:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m258\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn new() -> Chiptune {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m259\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m      unsafe {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m260\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        Chiptune { P: ffi::Chiptune_CreatePlayer(44100) }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m261\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m      }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m262\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_____^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(clippy::new_without_default)]` on by default\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#new_without_default\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: try this\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m257\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m  impl Default for chiptune::Chiptune {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m258\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m      fn default() -> Self {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m259\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m          Self::new()\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m260\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m      }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m261\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m  }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m262\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\n"}
{"message":"the loop variable `i` is used to index `program`","code":{"code":"clippy::needless_range_loop","explanation":null},"level":"warning","spans":[{"file_name":"/Users/ludwig/Dev/UnicornConsole/unicorn/src/chiptune/src/lib.rs","byte_start":18670,"byte_end":18675,"line_start":529,"line_end":529,"column_start":20,"column_end":25,"is_primary":true,"text":[{"text":"          for i in 0..32 {","highlight_start":20,"highlight_end":25}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/ludwig/Dev/UnicornConsole/unicorn/src/chiptune/src/lib.rs","byte_start":18670,"byte_end":18675,"line_start":529,"line_end":529,"column_start":20,"column_end":25,"is_primary":false,"text":[{"text":"          for i in 0..32 {","highlight_start":20,"highlight_end":25}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"desugaring of `for` loop","def_site_span":{"file_name":"/Users/ludwig/Dev/UnicornConsole/unicorn/src/chiptune/src/lib.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":false,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"`#[warn(clippy::needless_range_loop)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_range_loop","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"consider using an iterator","code":null,"level":"help","spans":[{"file_name":"/Users/ludwig/Dev/UnicornConsole/unicorn/src/chiptune/src/lib.rs","byte_start":18665,"byte_end":18666,"line_start":529,"line_end":529,"column_start":15,"column_end":16,"is_primary":true,"text":[{"text":"          for i in 0..32 {","highlight_start":15,"highlight_end":16}],"label":null,"suggested_replacement":"(i, <item>)","suggestion_applicability":"Unspecified","expansion":null},{"file_name":"/Users/ludwig/Dev/UnicornConsole/unicorn/src/chiptune/src/lib.rs","byte_start":18670,"byte_end":18675,"line_start":529,"line_end":529,"column_start":20,"column_end":25,"is_primary":true,"text":[{"text":"          for i in 0..32 {","highlight_start":20,"highlight_end":25}],"label":null,"suggested_replacement":"program.iter_mut().enumerate()","suggestion_applicability":"Unspecified","expansion":{"span":{"file_name":"/Users/ludwig/Dev/UnicornConsole/unicorn/src/chiptune/src/lib.rs","byte_start":18670,"byte_end":18675,"line_start":529,"line_end":529,"column_start":20,"column_end":25,"is_primary":false,"text":[{"text":"          for i in 0..32 {","highlight_start":20,"highlight_end":25}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"desugaring of `for` loop","def_site_span":{"file_name":"/Users/ludwig/Dev/UnicornConsole/unicorn/src/chiptune/src/lib.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":false,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: the loop variable `i` is used to index `program`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/ludwig/Dev/UnicornConsole/unicorn/src/chiptune/src/lib.rs:529:20\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m529\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m          for i in 0..32 {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                   \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(clippy::needless_range_loop)]` on by default\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_range_loop\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: consider using an iterator\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m529\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m          for (i, <item>) in program.iter_mut().enumerate() {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m^^^^^^^^^^^\u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\n"}
{"message":"it looks like you're manually copying between slices","code":{"code":"clippy::manual_memcpy","explanation":null},"level":"warning","spans":[{"file_name":"/Users/ludwig/Dev/UnicornConsole/unicorn/src/chiptune/src/lib.rs","byte_start":18670,"byte_end":18675,"line_start":529,"line_end":529,"column_start":20,"column_end":25,"is_primary":true,"text":[{"text":"          for i in 0..32 {","highlight_start":20,"highlight_end":25}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/ludwig/Dev/UnicornConsole/unicorn/src/chiptune/src/lib.rs","byte_start":18670,"byte_end":18675,"line_start":529,"line_end":529,"column_start":20,"column_end":25,"is_primary":false,"text":[{"text":"          for i in 0..32 {","highlight_start":20,"highlight_end":25}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"desugaring of `for` loop","def_site_span":{"file_name":"/Users/ludwig/Dev/UnicornConsole/unicorn/src/chiptune/src/lib.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":false,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"`#[warn(clippy::manual_memcpy)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#manual_memcpy","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"try replacing the loop by","code":null,"level":"help","spans":[{"file_name":"/Users/ludwig/Dev/UnicornConsole/unicorn/src/chiptune/src/lib.rs","byte_start":18670,"byte_end":18675,"line_start":529,"line_end":529,"column_start":20,"column_end":25,"is_primary":true,"text":[{"text":"          for i in 0..32 {","highlight_start":20,"highlight_end":25}],"label":null,"suggested_replacement":"program[..32].clone_from_slice(&(*sound.S).program[..32])","suggestion_applicability":"Unspecified","expansion":{"span":{"file_name":"/Users/ludwig/Dev/UnicornConsole/unicorn/src/chiptune/src/lib.rs","byte_start":18670,"byte_end":18675,"line_start":529,"line_end":529,"column_start":20,"column_end":25,"is_primary":false,"text":[{"text":"          for i in 0..32 {","highlight_start":20,"highlight_end":25}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"desugaring of `for` loop","def_site_span":{"file_name":"/Users/ludwig/Dev/UnicornConsole/unicorn/src/chiptune/src/lib.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":false,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: it looks like you're manually copying between slices\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/ludwig/Dev/UnicornConsole/unicorn/src/chiptune/src/lib.rs:529:20\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m529\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m          for i in 0..32 {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                   \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: try replacing the loop by: `program[..32].clone_from_slice(&(*sound.S).program[..32])`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(clippy::manual_memcpy)]` on by default\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#manual_memcpy\u001b[0m\n\n"}
{"message":"23 warnings emitted","code":null,"level":"warning","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: 23 warnings emitted\u001b[0m\n\n"}
